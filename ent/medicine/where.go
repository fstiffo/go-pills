// Code generated by ent, DO NOT EDIT.

package medicine

import (
	"fstiffo/pills/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldName, v))
}

// Mah applies equality check predicate on the "mah" field. It's identical to MahEQ.
func Mah(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldMah, v))
}

// Dosage applies equality check predicate on the "dosage" field. It's identical to DosageEQ.
func Dosage(v float64) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldDosage, v))
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldUnit, v))
}

// Atc applies equality check predicate on the "atc" field. It's identical to AtcEQ.
func Atc(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldAtc, v))
}

// Package applies equality check predicate on the "package" field. It's identical to PackageEQ.
func Package(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldPackage, v))
}

// Form applies equality check predicate on the "form" field. It's identical to FormEQ.
func Form(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldForm, v))
}

// BoxSize applies equality check predicate on the "box_size" field. It's identical to BoxSizeEQ.
func BoxSize(v int) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldBoxSize, v))
}

// Stock applies equality check predicate on the "stock" field. It's identical to StockEQ.
func Stock(v float32) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldStock, v))
}

// LastStockUpdate applies equality check predicate on the "last_stock_update" field. It's identical to LastStockUpdateEQ.
func LastStockUpdate(v time.Time) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldLastStockUpdate, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContainsFold(FieldName, v))
}

// MahEQ applies the EQ predicate on the "mah" field.
func MahEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldMah, v))
}

// MahNEQ applies the NEQ predicate on the "mah" field.
func MahNEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldMah, v))
}

// MahIn applies the In predicate on the "mah" field.
func MahIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldMah, vs...))
}

// MahNotIn applies the NotIn predicate on the "mah" field.
func MahNotIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldMah, vs...))
}

// MahGT applies the GT predicate on the "mah" field.
func MahGT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldMah, v))
}

// MahGTE applies the GTE predicate on the "mah" field.
func MahGTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldMah, v))
}

// MahLT applies the LT predicate on the "mah" field.
func MahLT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldMah, v))
}

// MahLTE applies the LTE predicate on the "mah" field.
func MahLTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldMah, v))
}

// MahContains applies the Contains predicate on the "mah" field.
func MahContains(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContains(FieldMah, v))
}

// MahHasPrefix applies the HasPrefix predicate on the "mah" field.
func MahHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasPrefix(FieldMah, v))
}

// MahHasSuffix applies the HasSuffix predicate on the "mah" field.
func MahHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasSuffix(FieldMah, v))
}

// MahEqualFold applies the EqualFold predicate on the "mah" field.
func MahEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEqualFold(FieldMah, v))
}

// MahContainsFold applies the ContainsFold predicate on the "mah" field.
func MahContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContainsFold(FieldMah, v))
}

// DosageEQ applies the EQ predicate on the "dosage" field.
func DosageEQ(v float64) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldDosage, v))
}

// DosageNEQ applies the NEQ predicate on the "dosage" field.
func DosageNEQ(v float64) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldDosage, v))
}

// DosageIn applies the In predicate on the "dosage" field.
func DosageIn(vs ...float64) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldDosage, vs...))
}

// DosageNotIn applies the NotIn predicate on the "dosage" field.
func DosageNotIn(vs ...float64) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldDosage, vs...))
}

// DosageGT applies the GT predicate on the "dosage" field.
func DosageGT(v float64) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldDosage, v))
}

// DosageGTE applies the GTE predicate on the "dosage" field.
func DosageGTE(v float64) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldDosage, v))
}

// DosageLT applies the LT predicate on the "dosage" field.
func DosageLT(v float64) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldDosage, v))
}

// DosageLTE applies the LTE predicate on the "dosage" field.
func DosageLTE(v float64) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldDosage, v))
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldUnit, v))
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldUnit, v))
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldUnit, vs...))
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldUnit, vs...))
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldUnit, v))
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldUnit, v))
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldUnit, v))
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldUnit, v))
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContains(FieldUnit, v))
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasPrefix(FieldUnit, v))
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasSuffix(FieldUnit, v))
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEqualFold(FieldUnit, v))
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContainsFold(FieldUnit, v))
}

// AtcEQ applies the EQ predicate on the "atc" field.
func AtcEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldAtc, v))
}

// AtcNEQ applies the NEQ predicate on the "atc" field.
func AtcNEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldAtc, v))
}

// AtcIn applies the In predicate on the "atc" field.
func AtcIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldAtc, vs...))
}

// AtcNotIn applies the NotIn predicate on the "atc" field.
func AtcNotIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldAtc, vs...))
}

// AtcGT applies the GT predicate on the "atc" field.
func AtcGT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldAtc, v))
}

// AtcGTE applies the GTE predicate on the "atc" field.
func AtcGTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldAtc, v))
}

// AtcLT applies the LT predicate on the "atc" field.
func AtcLT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldAtc, v))
}

// AtcLTE applies the LTE predicate on the "atc" field.
func AtcLTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldAtc, v))
}

// AtcContains applies the Contains predicate on the "atc" field.
func AtcContains(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContains(FieldAtc, v))
}

// AtcHasPrefix applies the HasPrefix predicate on the "atc" field.
func AtcHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasPrefix(FieldAtc, v))
}

// AtcHasSuffix applies the HasSuffix predicate on the "atc" field.
func AtcHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasSuffix(FieldAtc, v))
}

// AtcEqualFold applies the EqualFold predicate on the "atc" field.
func AtcEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEqualFold(FieldAtc, v))
}

// AtcContainsFold applies the ContainsFold predicate on the "atc" field.
func AtcContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContainsFold(FieldAtc, v))
}

// PackageEQ applies the EQ predicate on the "package" field.
func PackageEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldPackage, v))
}

// PackageNEQ applies the NEQ predicate on the "package" field.
func PackageNEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldPackage, v))
}

// PackageIn applies the In predicate on the "package" field.
func PackageIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldPackage, vs...))
}

// PackageNotIn applies the NotIn predicate on the "package" field.
func PackageNotIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldPackage, vs...))
}

// PackageGT applies the GT predicate on the "package" field.
func PackageGT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldPackage, v))
}

// PackageGTE applies the GTE predicate on the "package" field.
func PackageGTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldPackage, v))
}

// PackageLT applies the LT predicate on the "package" field.
func PackageLT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldPackage, v))
}

// PackageLTE applies the LTE predicate on the "package" field.
func PackageLTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldPackage, v))
}

// PackageContains applies the Contains predicate on the "package" field.
func PackageContains(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContains(FieldPackage, v))
}

// PackageHasPrefix applies the HasPrefix predicate on the "package" field.
func PackageHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasPrefix(FieldPackage, v))
}

// PackageHasSuffix applies the HasSuffix predicate on the "package" field.
func PackageHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasSuffix(FieldPackage, v))
}

// PackageEqualFold applies the EqualFold predicate on the "package" field.
func PackageEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEqualFold(FieldPackage, v))
}

// PackageContainsFold applies the ContainsFold predicate on the "package" field.
func PackageContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContainsFold(FieldPackage, v))
}

// FormEQ applies the EQ predicate on the "form" field.
func FormEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldForm, v))
}

// FormNEQ applies the NEQ predicate on the "form" field.
func FormNEQ(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldForm, v))
}

// FormIn applies the In predicate on the "form" field.
func FormIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldForm, vs...))
}

// FormNotIn applies the NotIn predicate on the "form" field.
func FormNotIn(vs ...string) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldForm, vs...))
}

// FormGT applies the GT predicate on the "form" field.
func FormGT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldForm, v))
}

// FormGTE applies the GTE predicate on the "form" field.
func FormGTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldForm, v))
}

// FormLT applies the LT predicate on the "form" field.
func FormLT(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldForm, v))
}

// FormLTE applies the LTE predicate on the "form" field.
func FormLTE(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldForm, v))
}

// FormContains applies the Contains predicate on the "form" field.
func FormContains(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContains(FieldForm, v))
}

// FormHasPrefix applies the HasPrefix predicate on the "form" field.
func FormHasPrefix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasPrefix(FieldForm, v))
}

// FormHasSuffix applies the HasSuffix predicate on the "form" field.
func FormHasSuffix(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldHasSuffix(FieldForm, v))
}

// FormEqualFold applies the EqualFold predicate on the "form" field.
func FormEqualFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldEqualFold(FieldForm, v))
}

// FormContainsFold applies the ContainsFold predicate on the "form" field.
func FormContainsFold(v string) predicate.Medicine {
	return predicate.Medicine(sql.FieldContainsFold(FieldForm, v))
}

// BoxSizeEQ applies the EQ predicate on the "box_size" field.
func BoxSizeEQ(v int) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldBoxSize, v))
}

// BoxSizeNEQ applies the NEQ predicate on the "box_size" field.
func BoxSizeNEQ(v int) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldBoxSize, v))
}

// BoxSizeIn applies the In predicate on the "box_size" field.
func BoxSizeIn(vs ...int) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldBoxSize, vs...))
}

// BoxSizeNotIn applies the NotIn predicate on the "box_size" field.
func BoxSizeNotIn(vs ...int) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldBoxSize, vs...))
}

// BoxSizeGT applies the GT predicate on the "box_size" field.
func BoxSizeGT(v int) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldBoxSize, v))
}

// BoxSizeGTE applies the GTE predicate on the "box_size" field.
func BoxSizeGTE(v int) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldBoxSize, v))
}

// BoxSizeLT applies the LT predicate on the "box_size" field.
func BoxSizeLT(v int) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldBoxSize, v))
}

// BoxSizeLTE applies the LTE predicate on the "box_size" field.
func BoxSizeLTE(v int) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldBoxSize, v))
}

// StockEQ applies the EQ predicate on the "stock" field.
func StockEQ(v float32) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldStock, v))
}

// StockNEQ applies the NEQ predicate on the "stock" field.
func StockNEQ(v float32) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldStock, v))
}

// StockIn applies the In predicate on the "stock" field.
func StockIn(vs ...float32) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldStock, vs...))
}

// StockNotIn applies the NotIn predicate on the "stock" field.
func StockNotIn(vs ...float32) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldStock, vs...))
}

// StockGT applies the GT predicate on the "stock" field.
func StockGT(v float32) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldStock, v))
}

// StockGTE applies the GTE predicate on the "stock" field.
func StockGTE(v float32) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldStock, v))
}

// StockLT applies the LT predicate on the "stock" field.
func StockLT(v float32) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldStock, v))
}

// StockLTE applies the LTE predicate on the "stock" field.
func StockLTE(v float32) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldStock, v))
}

// StockIsNil applies the IsNil predicate on the "stock" field.
func StockIsNil() predicate.Medicine {
	return predicate.Medicine(sql.FieldIsNull(FieldStock))
}

// StockNotNil applies the NotNil predicate on the "stock" field.
func StockNotNil() predicate.Medicine {
	return predicate.Medicine(sql.FieldNotNull(FieldStock))
}

// LastStockUpdateEQ applies the EQ predicate on the "last_stock_update" field.
func LastStockUpdateEQ(v time.Time) predicate.Medicine {
	return predicate.Medicine(sql.FieldEQ(FieldLastStockUpdate, v))
}

// LastStockUpdateNEQ applies the NEQ predicate on the "last_stock_update" field.
func LastStockUpdateNEQ(v time.Time) predicate.Medicine {
	return predicate.Medicine(sql.FieldNEQ(FieldLastStockUpdate, v))
}

// LastStockUpdateIn applies the In predicate on the "last_stock_update" field.
func LastStockUpdateIn(vs ...time.Time) predicate.Medicine {
	return predicate.Medicine(sql.FieldIn(FieldLastStockUpdate, vs...))
}

// LastStockUpdateNotIn applies the NotIn predicate on the "last_stock_update" field.
func LastStockUpdateNotIn(vs ...time.Time) predicate.Medicine {
	return predicate.Medicine(sql.FieldNotIn(FieldLastStockUpdate, vs...))
}

// LastStockUpdateGT applies the GT predicate on the "last_stock_update" field.
func LastStockUpdateGT(v time.Time) predicate.Medicine {
	return predicate.Medicine(sql.FieldGT(FieldLastStockUpdate, v))
}

// LastStockUpdateGTE applies the GTE predicate on the "last_stock_update" field.
func LastStockUpdateGTE(v time.Time) predicate.Medicine {
	return predicate.Medicine(sql.FieldGTE(FieldLastStockUpdate, v))
}

// LastStockUpdateLT applies the LT predicate on the "last_stock_update" field.
func LastStockUpdateLT(v time.Time) predicate.Medicine {
	return predicate.Medicine(sql.FieldLT(FieldLastStockUpdate, v))
}

// LastStockUpdateLTE applies the LTE predicate on the "last_stock_update" field.
func LastStockUpdateLTE(v time.Time) predicate.Medicine {
	return predicate.Medicine(sql.FieldLTE(FieldLastStockUpdate, v))
}

// HasPurchases applies the HasEdge predicate on the "purchases" edge.
func HasPurchases() predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PurchasesTable, PurchasesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPurchasesWith applies the HasEdge predicate on the "purchases" edge with a given conditions (other predicates).
func HasPurchasesWith(preds ...predicate.Purchase) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		step := newPurchasesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStockingLogs applies the HasEdge predicate on the "stocking_logs" edge.
func HasStockingLogs() predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StockingLogsTable, StockingLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStockingLogsWith applies the HasEdge predicate on the "stocking_logs" edge with a given conditions (other predicates).
func HasStockingLogsWith(preds ...predicate.StockingLog) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		step := newStockingLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActiveIngredient applies the HasEdge predicate on the "active_ingredient" edge.
func HasActiveIngredient() predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActiveIngredientTable, ActiveIngredientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActiveIngredientWith applies the HasEdge predicate on the "active_ingredient" edge with a given conditions (other predicates).
func HasActiveIngredientWith(preds ...predicate.ActiveIngredient) predicate.Medicine {
	return predicate.Medicine(func(s *sql.Selector) {
		step := newActiveIngredientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Medicine) predicate.Medicine {
	return predicate.Medicine(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Medicine) predicate.Medicine {
	return predicate.Medicine(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Medicine) predicate.Medicine {
	return predicate.Medicine(sql.NotPredicates(p))
}
