// Code generated by ent, DO NOT EDIT.

package medicine

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the medicine type in the database.
	Label = "medicine"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMah holds the string denoting the mah field in the database.
	FieldMah = "mah"
	// FieldDosage holds the string denoting the dosage field in the database.
	FieldDosage = "dosage"
	// FieldAtc holds the string denoting the atc field in the database.
	FieldAtc = "atc"
	// FieldPackage holds the string denoting the package field in the database.
	FieldPackage = "package"
	// FieldForm holds the string denoting the form field in the database.
	FieldForm = "form"
	// FieldBoxSize holds the string denoting the box_size field in the database.
	FieldBoxSize = "box_size"
	// EdgeStockingLogs holds the string denoting the stocking_logs edge name in mutations.
	EdgeStockingLogs = "stocking_logs"
	// EdgeActiveIngredient holds the string denoting the active_ingredient edge name in mutations.
	EdgeActiveIngredient = "active_ingredient"
	// Table holds the table name of the medicine in the database.
	Table = "medicines"
	// StockingLogsTable is the table that holds the stocking_logs relation/edge.
	StockingLogsTable = "stocking_logs"
	// StockingLogsInverseTable is the table name for the StockingLog entity.
	// It exists in this package in order to avoid circular dependency with the "stockinglog" package.
	StockingLogsInverseTable = "stocking_logs"
	// StockingLogsColumn is the table column denoting the stocking_logs relation/edge.
	StockingLogsColumn = "medicine_stocking_logs"
	// ActiveIngredientTable is the table that holds the active_ingredient relation/edge.
	ActiveIngredientTable = "medicines"
	// ActiveIngredientInverseTable is the table name for the ActiveIngredient entity.
	// It exists in this package in order to avoid circular dependency with the "activeingredient" package.
	ActiveIngredientInverseTable = "active_ingredients"
	// ActiveIngredientColumn is the table column denoting the active_ingredient relation/edge.
	ActiveIngredientColumn = "active_ingredient_medicines"
)

// Columns holds all SQL columns for medicine fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldMah,
	FieldDosage,
	FieldAtc,
	FieldPackage,
	FieldForm,
	FieldBoxSize,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "medicines"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"active_ingredient_medicines",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// MahValidator is a validator for the "mah" field. It is called by the builders before save.
	MahValidator func(string) error
	// DosageValidator is a validator for the "dosage" field. It is called by the builders before save.
	DosageValidator func(float64) error
	// AtcValidator is a validator for the "atc" field. It is called by the builders before save.
	AtcValidator func(string) error
	// BoxSizeValidator is a validator for the "box_size" field. It is called by the builders before save.
	BoxSizeValidator func(int) error
)

// OrderOption defines the ordering options for the Medicine queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMah orders the results by the mah field.
func ByMah(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMah, opts...).ToFunc()
}

// ByDosage orders the results by the dosage field.
func ByDosage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDosage, opts...).ToFunc()
}

// ByAtc orders the results by the atc field.
func ByAtc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAtc, opts...).ToFunc()
}

// ByPackage orders the results by the package field.
func ByPackage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackage, opts...).ToFunc()
}

// ByForm orders the results by the form field.
func ByForm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldForm, opts...).ToFunc()
}

// ByBoxSize orders the results by the box_size field.
func ByBoxSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBoxSize, opts...).ToFunc()
}

// ByStockingLogsCount orders the results by stocking_logs count.
func ByStockingLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStockingLogsStep(), opts...)
	}
}

// ByStockingLogs orders the results by stocking_logs terms.
func ByStockingLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStockingLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActiveIngredientField orders the results by active_ingredient field.
func ByActiveIngredientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActiveIngredientStep(), sql.OrderByField(field, opts...))
	}
}
func newStockingLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StockingLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StockingLogsTable, StockingLogsColumn),
	)
}
func newActiveIngredientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActiveIngredientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ActiveIngredientTable, ActiveIngredientColumn),
	)
}
