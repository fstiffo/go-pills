// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fstiffo/pills/ent/activeingredient"
	"fstiffo/pills/ent/consumptionlog"
	"fstiffo/pills/ent/predicate"
	"fstiffo/pills/ent/prescription"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PrescriptionUpdate is the builder for updating Prescription entities.
type PrescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *PrescriptionMutation
}

// Where appends a list predicates to the PrescriptionUpdate builder.
func (pu *PrescriptionUpdate) Where(ps ...predicate.Prescription) *PrescriptionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetDosage sets the "dosage" field.
func (pu *PrescriptionUpdate) SetDosage(i int) *PrescriptionUpdate {
	pu.mutation.ResetDosage()
	pu.mutation.SetDosage(i)
	return pu
}

// SetNillableDosage sets the "dosage" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableDosage(i *int) *PrescriptionUpdate {
	if i != nil {
		pu.SetDosage(*i)
	}
	return pu
}

// AddDosage adds i to the "dosage" field.
func (pu *PrescriptionUpdate) AddDosage(i int) *PrescriptionUpdate {
	pu.mutation.AddDosage(i)
	return pu
}

// SetDosageFrequency sets the "dosage_frequency" field.
func (pu *PrescriptionUpdate) SetDosageFrequency(i int) *PrescriptionUpdate {
	pu.mutation.ResetDosageFrequency()
	pu.mutation.SetDosageFrequency(i)
	return pu
}

// SetNillableDosageFrequency sets the "dosage_frequency" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableDosageFrequency(i *int) *PrescriptionUpdate {
	if i != nil {
		pu.SetDosageFrequency(*i)
	}
	return pu
}

// AddDosageFrequency adds i to the "dosage_frequency" field.
func (pu *PrescriptionUpdate) AddDosageFrequency(i int) *PrescriptionUpdate {
	pu.mutation.AddDosageFrequency(i)
	return pu
}

// ClearDosageFrequency clears the value of the "dosage_frequency" field.
func (pu *PrescriptionUpdate) ClearDosageFrequency() *PrescriptionUpdate {
	pu.mutation.ClearDosageFrequency()
	return pu
}

// SetStartDate sets the "start_date" field.
func (pu *PrescriptionUpdate) SetStartDate(t time.Time) *PrescriptionUpdate {
	pu.mutation.SetStartDate(t)
	return pu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableStartDate(t *time.Time) *PrescriptionUpdate {
	if t != nil {
		pu.SetStartDate(*t)
	}
	return pu
}

// ClearStartDate clears the value of the "start_date" field.
func (pu *PrescriptionUpdate) ClearStartDate() *PrescriptionUpdate {
	pu.mutation.ClearStartDate()
	return pu
}

// SetEndDate sets the "end_date" field.
func (pu *PrescriptionUpdate) SetEndDate(t time.Time) *PrescriptionUpdate {
	pu.mutation.SetEndDate(t)
	return pu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableEndDate(t *time.Time) *PrescriptionUpdate {
	if t != nil {
		pu.SetEndDate(*t)
	}
	return pu
}

// ClearEndDate clears the value of the "end_date" field.
func (pu *PrescriptionUpdate) ClearEndDate() *PrescriptionUpdate {
	pu.mutation.ClearEndDate()
	return pu
}

// AddComsumptionLogIDs adds the "comsumption_logs" edge to the ConsumptionLog entity by IDs.
func (pu *PrescriptionUpdate) AddComsumptionLogIDs(ids ...int) *PrescriptionUpdate {
	pu.mutation.AddComsumptionLogIDs(ids...)
	return pu
}

// AddComsumptionLogs adds the "comsumption_logs" edges to the ConsumptionLog entity.
func (pu *PrescriptionUpdate) AddComsumptionLogs(c ...*ConsumptionLog) *PrescriptionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddComsumptionLogIDs(ids...)
}

// SetActiveIngredientID sets the "active_ingredient" edge to the ActiveIngredient entity by ID.
func (pu *PrescriptionUpdate) SetActiveIngredientID(id int) *PrescriptionUpdate {
	pu.mutation.SetActiveIngredientID(id)
	return pu
}

// SetNillableActiveIngredientID sets the "active_ingredient" edge to the ActiveIngredient entity by ID if the given value is not nil.
func (pu *PrescriptionUpdate) SetNillableActiveIngredientID(id *int) *PrescriptionUpdate {
	if id != nil {
		pu = pu.SetActiveIngredientID(*id)
	}
	return pu
}

// SetActiveIngredient sets the "active_ingredient" edge to the ActiveIngredient entity.
func (pu *PrescriptionUpdate) SetActiveIngredient(a *ActiveIngredient) *PrescriptionUpdate {
	return pu.SetActiveIngredientID(a.ID)
}

// Mutation returns the PrescriptionMutation object of the builder.
func (pu *PrescriptionUpdate) Mutation() *PrescriptionMutation {
	return pu.mutation
}

// ClearComsumptionLogs clears all "comsumption_logs" edges to the ConsumptionLog entity.
func (pu *PrescriptionUpdate) ClearComsumptionLogs() *PrescriptionUpdate {
	pu.mutation.ClearComsumptionLogs()
	return pu
}

// RemoveComsumptionLogIDs removes the "comsumption_logs" edge to ConsumptionLog entities by IDs.
func (pu *PrescriptionUpdate) RemoveComsumptionLogIDs(ids ...int) *PrescriptionUpdate {
	pu.mutation.RemoveComsumptionLogIDs(ids...)
	return pu
}

// RemoveComsumptionLogs removes "comsumption_logs" edges to ConsumptionLog entities.
func (pu *PrescriptionUpdate) RemoveComsumptionLogs(c ...*ConsumptionLog) *PrescriptionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveComsumptionLogIDs(ids...)
}

// ClearActiveIngredient clears the "active_ingredient" edge to the ActiveIngredient entity.
func (pu *PrescriptionUpdate) ClearActiveIngredient() *PrescriptionUpdate {
	pu.mutation.ClearActiveIngredient()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PrescriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PrescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PrescriptionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PrescriptionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PrescriptionUpdate) check() error {
	if v, ok := pu.mutation.Dosage(); ok {
		if err := prescription.DosageValidator(v); err != nil {
			return &ValidationError{Name: "dosage", err: fmt.Errorf(`ent: validator failed for field "Prescription.dosage": %w`, err)}
		}
	}
	if v, ok := pu.mutation.DosageFrequency(); ok {
		if err := prescription.DosageFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "dosage_frequency", err: fmt.Errorf(`ent: validator failed for field "Prescription.dosage_frequency": %w`, err)}
		}
	}
	return nil
}

func (pu *PrescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(prescription.Table, prescription.Columns, sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Dosage(); ok {
		_spec.SetField(prescription.FieldDosage, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDosage(); ok {
		_spec.AddField(prescription.FieldDosage, field.TypeInt, value)
	}
	if value, ok := pu.mutation.DosageFrequency(); ok {
		_spec.SetField(prescription.FieldDosageFrequency, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedDosageFrequency(); ok {
		_spec.AddField(prescription.FieldDosageFrequency, field.TypeInt, value)
	}
	if pu.mutation.DosageFrequencyCleared() {
		_spec.ClearField(prescription.FieldDosageFrequency, field.TypeInt)
	}
	if value, ok := pu.mutation.StartDate(); ok {
		_spec.SetField(prescription.FieldStartDate, field.TypeTime, value)
	}
	if pu.mutation.StartDateCleared() {
		_spec.ClearField(prescription.FieldStartDate, field.TypeTime)
	}
	if value, ok := pu.mutation.EndDate(); ok {
		_spec.SetField(prescription.FieldEndDate, field.TypeTime, value)
	}
	if pu.mutation.EndDateCleared() {
		_spec.ClearField(prescription.FieldEndDate, field.TypeTime)
	}
	if pu.mutation.ComsumptionLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.ComsumptionLogsTable,
			Columns: []string{prescription.ComsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedComsumptionLogsIDs(); len(nodes) > 0 && !pu.mutation.ComsumptionLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.ComsumptionLogsTable,
			Columns: []string{prescription.ComsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ComsumptionLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.ComsumptionLogsTable,
			Columns: []string{prescription.ComsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ActiveIngredientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prescription.ActiveIngredientTable,
			Columns: []string{prescription.ActiveIngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ActiveIngredientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prescription.ActiveIngredientTable,
			Columns: []string{prescription.ActiveIngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PrescriptionUpdateOne is the builder for updating a single Prescription entity.
type PrescriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrescriptionMutation
}

// SetDosage sets the "dosage" field.
func (puo *PrescriptionUpdateOne) SetDosage(i int) *PrescriptionUpdateOne {
	puo.mutation.ResetDosage()
	puo.mutation.SetDosage(i)
	return puo
}

// SetNillableDosage sets the "dosage" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableDosage(i *int) *PrescriptionUpdateOne {
	if i != nil {
		puo.SetDosage(*i)
	}
	return puo
}

// AddDosage adds i to the "dosage" field.
func (puo *PrescriptionUpdateOne) AddDosage(i int) *PrescriptionUpdateOne {
	puo.mutation.AddDosage(i)
	return puo
}

// SetDosageFrequency sets the "dosage_frequency" field.
func (puo *PrescriptionUpdateOne) SetDosageFrequency(i int) *PrescriptionUpdateOne {
	puo.mutation.ResetDosageFrequency()
	puo.mutation.SetDosageFrequency(i)
	return puo
}

// SetNillableDosageFrequency sets the "dosage_frequency" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableDosageFrequency(i *int) *PrescriptionUpdateOne {
	if i != nil {
		puo.SetDosageFrequency(*i)
	}
	return puo
}

// AddDosageFrequency adds i to the "dosage_frequency" field.
func (puo *PrescriptionUpdateOne) AddDosageFrequency(i int) *PrescriptionUpdateOne {
	puo.mutation.AddDosageFrequency(i)
	return puo
}

// ClearDosageFrequency clears the value of the "dosage_frequency" field.
func (puo *PrescriptionUpdateOne) ClearDosageFrequency() *PrescriptionUpdateOne {
	puo.mutation.ClearDosageFrequency()
	return puo
}

// SetStartDate sets the "start_date" field.
func (puo *PrescriptionUpdateOne) SetStartDate(t time.Time) *PrescriptionUpdateOne {
	puo.mutation.SetStartDate(t)
	return puo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableStartDate(t *time.Time) *PrescriptionUpdateOne {
	if t != nil {
		puo.SetStartDate(*t)
	}
	return puo
}

// ClearStartDate clears the value of the "start_date" field.
func (puo *PrescriptionUpdateOne) ClearStartDate() *PrescriptionUpdateOne {
	puo.mutation.ClearStartDate()
	return puo
}

// SetEndDate sets the "end_date" field.
func (puo *PrescriptionUpdateOne) SetEndDate(t time.Time) *PrescriptionUpdateOne {
	puo.mutation.SetEndDate(t)
	return puo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableEndDate(t *time.Time) *PrescriptionUpdateOne {
	if t != nil {
		puo.SetEndDate(*t)
	}
	return puo
}

// ClearEndDate clears the value of the "end_date" field.
func (puo *PrescriptionUpdateOne) ClearEndDate() *PrescriptionUpdateOne {
	puo.mutation.ClearEndDate()
	return puo
}

// AddComsumptionLogIDs adds the "comsumption_logs" edge to the ConsumptionLog entity by IDs.
func (puo *PrescriptionUpdateOne) AddComsumptionLogIDs(ids ...int) *PrescriptionUpdateOne {
	puo.mutation.AddComsumptionLogIDs(ids...)
	return puo
}

// AddComsumptionLogs adds the "comsumption_logs" edges to the ConsumptionLog entity.
func (puo *PrescriptionUpdateOne) AddComsumptionLogs(c ...*ConsumptionLog) *PrescriptionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddComsumptionLogIDs(ids...)
}

// SetActiveIngredientID sets the "active_ingredient" edge to the ActiveIngredient entity by ID.
func (puo *PrescriptionUpdateOne) SetActiveIngredientID(id int) *PrescriptionUpdateOne {
	puo.mutation.SetActiveIngredientID(id)
	return puo
}

// SetNillableActiveIngredientID sets the "active_ingredient" edge to the ActiveIngredient entity by ID if the given value is not nil.
func (puo *PrescriptionUpdateOne) SetNillableActiveIngredientID(id *int) *PrescriptionUpdateOne {
	if id != nil {
		puo = puo.SetActiveIngredientID(*id)
	}
	return puo
}

// SetActiveIngredient sets the "active_ingredient" edge to the ActiveIngredient entity.
func (puo *PrescriptionUpdateOne) SetActiveIngredient(a *ActiveIngredient) *PrescriptionUpdateOne {
	return puo.SetActiveIngredientID(a.ID)
}

// Mutation returns the PrescriptionMutation object of the builder.
func (puo *PrescriptionUpdateOne) Mutation() *PrescriptionMutation {
	return puo.mutation
}

// ClearComsumptionLogs clears all "comsumption_logs" edges to the ConsumptionLog entity.
func (puo *PrescriptionUpdateOne) ClearComsumptionLogs() *PrescriptionUpdateOne {
	puo.mutation.ClearComsumptionLogs()
	return puo
}

// RemoveComsumptionLogIDs removes the "comsumption_logs" edge to ConsumptionLog entities by IDs.
func (puo *PrescriptionUpdateOne) RemoveComsumptionLogIDs(ids ...int) *PrescriptionUpdateOne {
	puo.mutation.RemoveComsumptionLogIDs(ids...)
	return puo
}

// RemoveComsumptionLogs removes "comsumption_logs" edges to ConsumptionLog entities.
func (puo *PrescriptionUpdateOne) RemoveComsumptionLogs(c ...*ConsumptionLog) *PrescriptionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveComsumptionLogIDs(ids...)
}

// ClearActiveIngredient clears the "active_ingredient" edge to the ActiveIngredient entity.
func (puo *PrescriptionUpdateOne) ClearActiveIngredient() *PrescriptionUpdateOne {
	puo.mutation.ClearActiveIngredient()
	return puo
}

// Where appends a list predicates to the PrescriptionUpdate builder.
func (puo *PrescriptionUpdateOne) Where(ps ...predicate.Prescription) *PrescriptionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PrescriptionUpdateOne) Select(field string, fields ...string) *PrescriptionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Prescription entity.
func (puo *PrescriptionUpdateOne) Save(ctx context.Context) (*Prescription, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PrescriptionUpdateOne) SaveX(ctx context.Context) *Prescription {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PrescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PrescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PrescriptionUpdateOne) check() error {
	if v, ok := puo.mutation.Dosage(); ok {
		if err := prescription.DosageValidator(v); err != nil {
			return &ValidationError{Name: "dosage", err: fmt.Errorf(`ent: validator failed for field "Prescription.dosage": %w`, err)}
		}
	}
	if v, ok := puo.mutation.DosageFrequency(); ok {
		if err := prescription.DosageFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "dosage_frequency", err: fmt.Errorf(`ent: validator failed for field "Prescription.dosage_frequency": %w`, err)}
		}
	}
	return nil
}

func (puo *PrescriptionUpdateOne) sqlSave(ctx context.Context) (_node *Prescription, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(prescription.Table, prescription.Columns, sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Prescription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, prescription.FieldID)
		for _, f := range fields {
			if !prescription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != prescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Dosage(); ok {
		_spec.SetField(prescription.FieldDosage, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDosage(); ok {
		_spec.AddField(prescription.FieldDosage, field.TypeInt, value)
	}
	if value, ok := puo.mutation.DosageFrequency(); ok {
		_spec.SetField(prescription.FieldDosageFrequency, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedDosageFrequency(); ok {
		_spec.AddField(prescription.FieldDosageFrequency, field.TypeInt, value)
	}
	if puo.mutation.DosageFrequencyCleared() {
		_spec.ClearField(prescription.FieldDosageFrequency, field.TypeInt)
	}
	if value, ok := puo.mutation.StartDate(); ok {
		_spec.SetField(prescription.FieldStartDate, field.TypeTime, value)
	}
	if puo.mutation.StartDateCleared() {
		_spec.ClearField(prescription.FieldStartDate, field.TypeTime)
	}
	if value, ok := puo.mutation.EndDate(); ok {
		_spec.SetField(prescription.FieldEndDate, field.TypeTime, value)
	}
	if puo.mutation.EndDateCleared() {
		_spec.ClearField(prescription.FieldEndDate, field.TypeTime)
	}
	if puo.mutation.ComsumptionLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.ComsumptionLogsTable,
			Columns: []string{prescription.ComsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedComsumptionLogsIDs(); len(nodes) > 0 && !puo.mutation.ComsumptionLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.ComsumptionLogsTable,
			Columns: []string{prescription.ComsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ComsumptionLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   prescription.ComsumptionLogsTable,
			Columns: []string{prescription.ComsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ActiveIngredientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prescription.ActiveIngredientTable,
			Columns: []string{prescription.ActiveIngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ActiveIngredientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   prescription.ActiveIngredientTable,
			Columns: []string{prescription.ActiveIngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Prescription{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{prescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
