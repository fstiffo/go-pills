// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"fstiffo/pills/ent/activeingredient"
	"fstiffo/pills/ent/prescription"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Prescription is the model entity for the Prescription schema.
type Prescription struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Dosage holds the value of the "dosage" field.
	Dosage int `json:"dosage,omitempty"`
	// DosageFrequency holds the value of the "dosage_frequency" field.
	DosageFrequency int `json:"dosage_frequency,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate time.Time `json:"end_date,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrescriptionQuery when eager-loading is set.
	Edges                           PrescriptionEdges `json:"edges"`
	active_ingredient_prescriptions *int
	selectValues                    sql.SelectValues
}

// PrescriptionEdges holds the relations/edges for other nodes in the graph.
type PrescriptionEdges struct {
	// ComsumptionLogs holds the value of the comsumption_logs edge.
	ComsumptionLogs []*ConsumptionLog `json:"comsumption_logs,omitempty"`
	// ActiveIngredient holds the value of the active_ingredient edge.
	ActiveIngredient *ActiveIngredient `json:"active_ingredient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ComsumptionLogsOrErr returns the ComsumptionLogs value or an error if the edge
// was not loaded in eager-loading.
func (e PrescriptionEdges) ComsumptionLogsOrErr() ([]*ConsumptionLog, error) {
	if e.loadedTypes[0] {
		return e.ComsumptionLogs, nil
	}
	return nil, &NotLoadedError{edge: "comsumption_logs"}
}

// ActiveIngredientOrErr returns the ActiveIngredient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrescriptionEdges) ActiveIngredientOrErr() (*ActiveIngredient, error) {
	if e.ActiveIngredient != nil {
		return e.ActiveIngredient, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: activeingredient.Label}
	}
	return nil, &NotLoadedError{edge: "active_ingredient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Prescription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case prescription.FieldID, prescription.FieldDosage, prescription.FieldDosageFrequency:
			values[i] = new(sql.NullInt64)
		case prescription.FieldStartDate, prescription.FieldEndDate:
			values[i] = new(sql.NullTime)
		case prescription.ForeignKeys[0]: // active_ingredient_prescriptions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Prescription fields.
func (pr *Prescription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case prescription.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case prescription.FieldDosage:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dosage", values[i])
			} else if value.Valid {
				pr.Dosage = int(value.Int64)
			}
		case prescription.FieldDosageFrequency:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dosage_frequency", values[i])
			} else if value.Valid {
				pr.DosageFrequency = int(value.Int64)
			}
		case prescription.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				pr.StartDate = value.Time
			}
		case prescription.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				pr.EndDate = value.Time
			}
		case prescription.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field active_ingredient_prescriptions", value)
			} else if value.Valid {
				pr.active_ingredient_prescriptions = new(int)
				*pr.active_ingredient_prescriptions = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Prescription.
// This includes values selected through modifiers, order, etc.
func (pr *Prescription) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryComsumptionLogs queries the "comsumption_logs" edge of the Prescription entity.
func (pr *Prescription) QueryComsumptionLogs() *ConsumptionLogQuery {
	return NewPrescriptionClient(pr.config).QueryComsumptionLogs(pr)
}

// QueryActiveIngredient queries the "active_ingredient" edge of the Prescription entity.
func (pr *Prescription) QueryActiveIngredient() *ActiveIngredientQuery {
	return NewPrescriptionClient(pr.config).QueryActiveIngredient(pr)
}

// Update returns a builder for updating this Prescription.
// Note that you need to call Prescription.Unwrap() before calling this method if this Prescription
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Prescription) Update() *PrescriptionUpdateOne {
	return NewPrescriptionClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Prescription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Prescription) Unwrap() *Prescription {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Prescription is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Prescription) String() string {
	var builder strings.Builder
	builder.WriteString("Prescription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("dosage=")
	builder.WriteString(fmt.Sprintf("%v", pr.Dosage))
	builder.WriteString(", ")
	builder.WriteString("dosage_frequency=")
	builder.WriteString(fmt.Sprintf("%v", pr.DosageFrequency))
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(pr.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_date=")
	builder.WriteString(pr.EndDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Prescriptions is a parsable slice of Prescription.
type Prescriptions []*Prescription
