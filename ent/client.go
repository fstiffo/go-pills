// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"fstiffo/pills/ent/migrate"

	"fstiffo/pills/ent/activeingredient"
	"fstiffo/pills/ent/consumptionlog"
	"fstiffo/pills/ent/medicine"
	"fstiffo/pills/ent/prescription"
	"fstiffo/pills/ent/stockinglog"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ActiveIngredient is the client for interacting with the ActiveIngredient builders.
	ActiveIngredient *ActiveIngredientClient
	// ConsumptionLog is the client for interacting with the ConsumptionLog builders.
	ConsumptionLog *ConsumptionLogClient
	// Medicine is the client for interacting with the Medicine builders.
	Medicine *MedicineClient
	// Prescription is the client for interacting with the Prescription builders.
	Prescription *PrescriptionClient
	// StockingLog is the client for interacting with the StockingLog builders.
	StockingLog *StockingLogClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ActiveIngredient = NewActiveIngredientClient(c.config)
	c.ConsumptionLog = NewConsumptionLogClient(c.config)
	c.Medicine = NewMedicineClient(c.config)
	c.Prescription = NewPrescriptionClient(c.config)
	c.StockingLog = NewStockingLogClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		ActiveIngredient: NewActiveIngredientClient(cfg),
		ConsumptionLog:   NewConsumptionLogClient(cfg),
		Medicine:         NewMedicineClient(cfg),
		Prescription:     NewPrescriptionClient(cfg),
		StockingLog:      NewStockingLogClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		ActiveIngredient: NewActiveIngredientClient(cfg),
		ConsumptionLog:   NewConsumptionLogClient(cfg),
		Medicine:         NewMedicineClient(cfg),
		Prescription:     NewPrescriptionClient(cfg),
		StockingLog:      NewStockingLogClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ActiveIngredient.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ActiveIngredient.Use(hooks...)
	c.ConsumptionLog.Use(hooks...)
	c.Medicine.Use(hooks...)
	c.Prescription.Use(hooks...)
	c.StockingLog.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.ActiveIngredient.Intercept(interceptors...)
	c.ConsumptionLog.Intercept(interceptors...)
	c.Medicine.Intercept(interceptors...)
	c.Prescription.Intercept(interceptors...)
	c.StockingLog.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ActiveIngredientMutation:
		return c.ActiveIngredient.mutate(ctx, m)
	case *ConsumptionLogMutation:
		return c.ConsumptionLog.mutate(ctx, m)
	case *MedicineMutation:
		return c.Medicine.mutate(ctx, m)
	case *PrescriptionMutation:
		return c.Prescription.mutate(ctx, m)
	case *StockingLogMutation:
		return c.StockingLog.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ActiveIngredientClient is a client for the ActiveIngredient schema.
type ActiveIngredientClient struct {
	config
}

// NewActiveIngredientClient returns a client for the ActiveIngredient from the given config.
func NewActiveIngredientClient(c config) *ActiveIngredientClient {
	return &ActiveIngredientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `activeingredient.Hooks(f(g(h())))`.
func (c *ActiveIngredientClient) Use(hooks ...Hook) {
	c.hooks.ActiveIngredient = append(c.hooks.ActiveIngredient, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `activeingredient.Intercept(f(g(h())))`.
func (c *ActiveIngredientClient) Intercept(interceptors ...Interceptor) {
	c.inters.ActiveIngredient = append(c.inters.ActiveIngredient, interceptors...)
}

// Create returns a builder for creating a ActiveIngredient entity.
func (c *ActiveIngredientClient) Create() *ActiveIngredientCreate {
	mutation := newActiveIngredientMutation(c.config, OpCreate)
	return &ActiveIngredientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ActiveIngredient entities.
func (c *ActiveIngredientClient) CreateBulk(builders ...*ActiveIngredientCreate) *ActiveIngredientCreateBulk {
	return &ActiveIngredientCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ActiveIngredientClient) MapCreateBulk(slice any, setFunc func(*ActiveIngredientCreate, int)) *ActiveIngredientCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ActiveIngredientCreateBulk{err: fmt.Errorf("calling to ActiveIngredientClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ActiveIngredientCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ActiveIngredientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ActiveIngredient.
func (c *ActiveIngredientClient) Update() *ActiveIngredientUpdate {
	mutation := newActiveIngredientMutation(c.config, OpUpdate)
	return &ActiveIngredientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ActiveIngredientClient) UpdateOne(ai *ActiveIngredient) *ActiveIngredientUpdateOne {
	mutation := newActiveIngredientMutation(c.config, OpUpdateOne, withActiveIngredient(ai))
	return &ActiveIngredientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ActiveIngredientClient) UpdateOneID(id int) *ActiveIngredientUpdateOne {
	mutation := newActiveIngredientMutation(c.config, OpUpdateOne, withActiveIngredientID(id))
	return &ActiveIngredientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ActiveIngredient.
func (c *ActiveIngredientClient) Delete() *ActiveIngredientDelete {
	mutation := newActiveIngredientMutation(c.config, OpDelete)
	return &ActiveIngredientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ActiveIngredientClient) DeleteOne(ai *ActiveIngredient) *ActiveIngredientDeleteOne {
	return c.DeleteOneID(ai.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ActiveIngredientClient) DeleteOneID(id int) *ActiveIngredientDeleteOne {
	builder := c.Delete().Where(activeingredient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ActiveIngredientDeleteOne{builder}
}

// Query returns a query builder for ActiveIngredient.
func (c *ActiveIngredientClient) Query() *ActiveIngredientQuery {
	return &ActiveIngredientQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeActiveIngredient},
		inters: c.Interceptors(),
	}
}

// Get returns a ActiveIngredient entity by its id.
func (c *ActiveIngredientClient) Get(ctx context.Context, id int) (*ActiveIngredient, error) {
	return c.Query().Where(activeingredient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ActiveIngredientClient) GetX(ctx context.Context, id int) *ActiveIngredient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMedicines queries the medicines edge of a ActiveIngredient.
func (c *ActiveIngredientClient) QueryMedicines(ai *ActiveIngredient) *MedicineQuery {
	query := (&MedicineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activeingredient.Table, activeingredient.FieldID, id),
			sqlgraph.To(medicine.Table, medicine.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activeingredient.MedicinesTable, activeingredient.MedicinesColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPrescriptions queries the prescriptions edge of a ActiveIngredient.
func (c *ActiveIngredientClient) QueryPrescriptions(ai *ActiveIngredient) *PrescriptionQuery {
	query := (&PrescriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activeingredient.Table, activeingredient.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activeingredient.PrescriptionsTable, activeingredient.PrescriptionsColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStockingLogs queries the stocking_logs edge of a ActiveIngredient.
func (c *ActiveIngredientClient) QueryStockingLogs(ai *ActiveIngredient) *StockingLogQuery {
	query := (&StockingLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activeingredient.Table, activeingredient.FieldID, id),
			sqlgraph.To(stockinglog.Table, stockinglog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activeingredient.StockingLogsTable, activeingredient.StockingLogsColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryConsumptionLogs queries the consumption_logs edge of a ActiveIngredient.
func (c *ActiveIngredientClient) QueryConsumptionLogs(ai *ActiveIngredient) *ConsumptionLogQuery {
	query := (&ConsumptionLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ai.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(activeingredient.Table, activeingredient.FieldID, id),
			sqlgraph.To(consumptionlog.Table, consumptionlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, activeingredient.ConsumptionLogsTable, activeingredient.ConsumptionLogsColumn),
		)
		fromV = sqlgraph.Neighbors(ai.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ActiveIngredientClient) Hooks() []Hook {
	return c.hooks.ActiveIngredient
}

// Interceptors returns the client interceptors.
func (c *ActiveIngredientClient) Interceptors() []Interceptor {
	return c.inters.ActiveIngredient
}

func (c *ActiveIngredientClient) mutate(ctx context.Context, m *ActiveIngredientMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ActiveIngredientCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ActiveIngredientUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ActiveIngredientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ActiveIngredientDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ActiveIngredient mutation op: %q", m.Op())
	}
}

// ConsumptionLogClient is a client for the ConsumptionLog schema.
type ConsumptionLogClient struct {
	config
}

// NewConsumptionLogClient returns a client for the ConsumptionLog from the given config.
func NewConsumptionLogClient(c config) *ConsumptionLogClient {
	return &ConsumptionLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `consumptionlog.Hooks(f(g(h())))`.
func (c *ConsumptionLogClient) Use(hooks ...Hook) {
	c.hooks.ConsumptionLog = append(c.hooks.ConsumptionLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `consumptionlog.Intercept(f(g(h())))`.
func (c *ConsumptionLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.ConsumptionLog = append(c.inters.ConsumptionLog, interceptors...)
}

// Create returns a builder for creating a ConsumptionLog entity.
func (c *ConsumptionLogClient) Create() *ConsumptionLogCreate {
	mutation := newConsumptionLogMutation(c.config, OpCreate)
	return &ConsumptionLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConsumptionLog entities.
func (c *ConsumptionLogClient) CreateBulk(builders ...*ConsumptionLogCreate) *ConsumptionLogCreateBulk {
	return &ConsumptionLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ConsumptionLogClient) MapCreateBulk(slice any, setFunc func(*ConsumptionLogCreate, int)) *ConsumptionLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ConsumptionLogCreateBulk{err: fmt.Errorf("calling to ConsumptionLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ConsumptionLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ConsumptionLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConsumptionLog.
func (c *ConsumptionLogClient) Update() *ConsumptionLogUpdate {
	mutation := newConsumptionLogMutation(c.config, OpUpdate)
	return &ConsumptionLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConsumptionLogClient) UpdateOne(cl *ConsumptionLog) *ConsumptionLogUpdateOne {
	mutation := newConsumptionLogMutation(c.config, OpUpdateOne, withConsumptionLog(cl))
	return &ConsumptionLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConsumptionLogClient) UpdateOneID(id int) *ConsumptionLogUpdateOne {
	mutation := newConsumptionLogMutation(c.config, OpUpdateOne, withConsumptionLogID(id))
	return &ConsumptionLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConsumptionLog.
func (c *ConsumptionLogClient) Delete() *ConsumptionLogDelete {
	mutation := newConsumptionLogMutation(c.config, OpDelete)
	return &ConsumptionLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConsumptionLogClient) DeleteOne(cl *ConsumptionLog) *ConsumptionLogDeleteOne {
	return c.DeleteOneID(cl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ConsumptionLogClient) DeleteOneID(id int) *ConsumptionLogDeleteOne {
	builder := c.Delete().Where(consumptionlog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConsumptionLogDeleteOne{builder}
}

// Query returns a query builder for ConsumptionLog.
func (c *ConsumptionLogClient) Query() *ConsumptionLogQuery {
	return &ConsumptionLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeConsumptionLog},
		inters: c.Interceptors(),
	}
}

// Get returns a ConsumptionLog entity by its id.
func (c *ConsumptionLogClient) Get(ctx context.Context, id int) (*ConsumptionLog, error) {
	return c.Query().Where(consumptionlog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConsumptionLogClient) GetX(ctx context.Context, id int) *ConsumptionLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrescription queries the prescription edge of a ConsumptionLog.
func (c *ConsumptionLogClient) QueryPrescription(cl *ConsumptionLog) *PrescriptionQuery {
	query := (&PrescriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(consumptionlog.Table, consumptionlog.FieldID, id),
			sqlgraph.To(prescription.Table, prescription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, consumptionlog.PrescriptionTable, consumptionlog.PrescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(cl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ConsumptionLogClient) Hooks() []Hook {
	return c.hooks.ConsumptionLog
}

// Interceptors returns the client interceptors.
func (c *ConsumptionLogClient) Interceptors() []Interceptor {
	return c.inters.ConsumptionLog
}

func (c *ConsumptionLogClient) mutate(ctx context.Context, m *ConsumptionLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ConsumptionLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ConsumptionLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ConsumptionLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ConsumptionLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ConsumptionLog mutation op: %q", m.Op())
	}
}

// MedicineClient is a client for the Medicine schema.
type MedicineClient struct {
	config
}

// NewMedicineClient returns a client for the Medicine from the given config.
func NewMedicineClient(c config) *MedicineClient {
	return &MedicineClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicine.Hooks(f(g(h())))`.
func (c *MedicineClient) Use(hooks ...Hook) {
	c.hooks.Medicine = append(c.hooks.Medicine, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `medicine.Intercept(f(g(h())))`.
func (c *MedicineClient) Intercept(interceptors ...Interceptor) {
	c.inters.Medicine = append(c.inters.Medicine, interceptors...)
}

// Create returns a builder for creating a Medicine entity.
func (c *MedicineClient) Create() *MedicineCreate {
	mutation := newMedicineMutation(c.config, OpCreate)
	return &MedicineCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Medicine entities.
func (c *MedicineClient) CreateBulk(builders ...*MedicineCreate) *MedicineCreateBulk {
	return &MedicineCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MedicineClient) MapCreateBulk(slice any, setFunc func(*MedicineCreate, int)) *MedicineCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MedicineCreateBulk{err: fmt.Errorf("calling to MedicineClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MedicineCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MedicineCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Medicine.
func (c *MedicineClient) Update() *MedicineUpdate {
	mutation := newMedicineMutation(c.config, OpUpdate)
	return &MedicineUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicineClient) UpdateOne(m *Medicine) *MedicineUpdateOne {
	mutation := newMedicineMutation(c.config, OpUpdateOne, withMedicine(m))
	return &MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicineClient) UpdateOneID(id int) *MedicineUpdateOne {
	mutation := newMedicineMutation(c.config, OpUpdateOne, withMedicineID(id))
	return &MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Medicine.
func (c *MedicineClient) Delete() *MedicineDelete {
	mutation := newMedicineMutation(c.config, OpDelete)
	return &MedicineDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MedicineClient) DeleteOne(m *Medicine) *MedicineDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MedicineClient) DeleteOneID(id int) *MedicineDeleteOne {
	builder := c.Delete().Where(medicine.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicineDeleteOne{builder}
}

// Query returns a query builder for Medicine.
func (c *MedicineClient) Query() *MedicineQuery {
	return &MedicineQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMedicine},
		inters: c.Interceptors(),
	}
}

// Get returns a Medicine entity by its id.
func (c *MedicineClient) Get(ctx context.Context, id int) (*Medicine, error) {
	return c.Query().Where(medicine.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicineClient) GetX(ctx context.Context, id int) *Medicine {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStockingLogs queries the stocking_logs edge of a Medicine.
func (c *MedicineClient) QueryStockingLogs(m *Medicine) *StockingLogQuery {
	query := (&StockingLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicine.Table, medicine.FieldID, id),
			sqlgraph.To(stockinglog.Table, stockinglog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, medicine.StockingLogsTable, medicine.StockingLogsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActiveIngredient queries the active_ingredient edge of a Medicine.
func (c *MedicineClient) QueryActiveIngredient(m *Medicine) *ActiveIngredientQuery {
	query := (&ActiveIngredientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicine.Table, medicine.FieldID, id),
			sqlgraph.To(activeingredient.Table, activeingredient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, medicine.ActiveIngredientTable, medicine.ActiveIngredientColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MedicineClient) Hooks() []Hook {
	return c.hooks.Medicine
}

// Interceptors returns the client interceptors.
func (c *MedicineClient) Interceptors() []Interceptor {
	return c.inters.Medicine
}

func (c *MedicineClient) mutate(ctx context.Context, m *MedicineMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MedicineCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MedicineUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MedicineUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MedicineDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Medicine mutation op: %q", m.Op())
	}
}

// PrescriptionClient is a client for the Prescription schema.
type PrescriptionClient struct {
	config
}

// NewPrescriptionClient returns a client for the Prescription from the given config.
func NewPrescriptionClient(c config) *PrescriptionClient {
	return &PrescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prescription.Hooks(f(g(h())))`.
func (c *PrescriptionClient) Use(hooks ...Hook) {
	c.hooks.Prescription = append(c.hooks.Prescription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `prescription.Intercept(f(g(h())))`.
func (c *PrescriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Prescription = append(c.inters.Prescription, interceptors...)
}

// Create returns a builder for creating a Prescription entity.
func (c *PrescriptionClient) Create() *PrescriptionCreate {
	mutation := newPrescriptionMutation(c.config, OpCreate)
	return &PrescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Prescription entities.
func (c *PrescriptionClient) CreateBulk(builders ...*PrescriptionCreate) *PrescriptionCreateBulk {
	return &PrescriptionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PrescriptionClient) MapCreateBulk(slice any, setFunc func(*PrescriptionCreate, int)) *PrescriptionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PrescriptionCreateBulk{err: fmt.Errorf("calling to PrescriptionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PrescriptionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PrescriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Prescription.
func (c *PrescriptionClient) Update() *PrescriptionUpdate {
	mutation := newPrescriptionMutation(c.config, OpUpdate)
	return &PrescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrescriptionClient) UpdateOne(pr *Prescription) *PrescriptionUpdateOne {
	mutation := newPrescriptionMutation(c.config, OpUpdateOne, withPrescription(pr))
	return &PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrescriptionClient) UpdateOneID(id int) *PrescriptionUpdateOne {
	mutation := newPrescriptionMutation(c.config, OpUpdateOne, withPrescriptionID(id))
	return &PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prescription.
func (c *PrescriptionClient) Delete() *PrescriptionDelete {
	mutation := newPrescriptionMutation(c.config, OpDelete)
	return &PrescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PrescriptionClient) DeleteOne(pr *Prescription) *PrescriptionDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PrescriptionClient) DeleteOneID(id int) *PrescriptionDeleteOne {
	builder := c.Delete().Where(prescription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrescriptionDeleteOne{builder}
}

// Query returns a query builder for Prescription.
func (c *PrescriptionClient) Query() *PrescriptionQuery {
	return &PrescriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePrescription},
		inters: c.Interceptors(),
	}
}

// Get returns a Prescription entity by its id.
func (c *PrescriptionClient) Get(ctx context.Context, id int) (*Prescription, error) {
	return c.Query().Where(prescription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrescriptionClient) GetX(ctx context.Context, id int) *Prescription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComsumptionLogs queries the comsumption_logs edge of a Prescription.
func (c *PrescriptionClient) QueryComsumptionLogs(pr *Prescription) *ConsumptionLogQuery {
	query := (&ConsumptionLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(consumptionlog.Table, consumptionlog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prescription.ComsumptionLogsTable, prescription.ComsumptionLogsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActiveIngredient queries the active_ingredient edge of a Prescription.
func (c *PrescriptionClient) QueryActiveIngredient(pr *Prescription) *ActiveIngredientQuery {
	query := (&ActiveIngredientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prescription.Table, prescription.FieldID, id),
			sqlgraph.To(activeingredient.Table, activeingredient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, prescription.ActiveIngredientTable, prescription.ActiveIngredientColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrescriptionClient) Hooks() []Hook {
	return c.hooks.Prescription
}

// Interceptors returns the client interceptors.
func (c *PrescriptionClient) Interceptors() []Interceptor {
	return c.inters.Prescription
}

func (c *PrescriptionClient) mutate(ctx context.Context, m *PrescriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PrescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PrescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PrescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PrescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Prescription mutation op: %q", m.Op())
	}
}

// StockingLogClient is a client for the StockingLog schema.
type StockingLogClient struct {
	config
}

// NewStockingLogClient returns a client for the StockingLog from the given config.
func NewStockingLogClient(c config) *StockingLogClient {
	return &StockingLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `stockinglog.Hooks(f(g(h())))`.
func (c *StockingLogClient) Use(hooks ...Hook) {
	c.hooks.StockingLog = append(c.hooks.StockingLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `stockinglog.Intercept(f(g(h())))`.
func (c *StockingLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.StockingLog = append(c.inters.StockingLog, interceptors...)
}

// Create returns a builder for creating a StockingLog entity.
func (c *StockingLogClient) Create() *StockingLogCreate {
	mutation := newStockingLogMutation(c.config, OpCreate)
	return &StockingLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StockingLog entities.
func (c *StockingLogClient) CreateBulk(builders ...*StockingLogCreate) *StockingLogCreateBulk {
	return &StockingLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StockingLogClient) MapCreateBulk(slice any, setFunc func(*StockingLogCreate, int)) *StockingLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StockingLogCreateBulk{err: fmt.Errorf("calling to StockingLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StockingLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StockingLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StockingLog.
func (c *StockingLogClient) Update() *StockingLogUpdate {
	mutation := newStockingLogMutation(c.config, OpUpdate)
	return &StockingLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StockingLogClient) UpdateOne(sl *StockingLog) *StockingLogUpdateOne {
	mutation := newStockingLogMutation(c.config, OpUpdateOne, withStockingLog(sl))
	return &StockingLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StockingLogClient) UpdateOneID(id int) *StockingLogUpdateOne {
	mutation := newStockingLogMutation(c.config, OpUpdateOne, withStockingLogID(id))
	return &StockingLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StockingLog.
func (c *StockingLogClient) Delete() *StockingLogDelete {
	mutation := newStockingLogMutation(c.config, OpDelete)
	return &StockingLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StockingLogClient) DeleteOne(sl *StockingLog) *StockingLogDeleteOne {
	return c.DeleteOneID(sl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StockingLogClient) DeleteOneID(id int) *StockingLogDeleteOne {
	builder := c.Delete().Where(stockinglog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StockingLogDeleteOne{builder}
}

// Query returns a query builder for StockingLog.
func (c *StockingLogClient) Query() *StockingLogQuery {
	return &StockingLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStockingLog},
		inters: c.Interceptors(),
	}
}

// Get returns a StockingLog entity by its id.
func (c *StockingLogClient) Get(ctx context.Context, id int) (*StockingLog, error) {
	return c.Query().Where(stockinglog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StockingLogClient) GetX(ctx context.Context, id int) *StockingLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMedicine queries the medicine edge of a StockingLog.
func (c *StockingLogClient) QueryMedicine(sl *StockingLog) *MedicineQuery {
	query := (&MedicineClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stockinglog.Table, stockinglog.FieldID, id),
			sqlgraph.To(medicine.Table, medicine.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stockinglog.MedicineTable, stockinglog.MedicineColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryActiveIngredient queries the active_ingredient edge of a StockingLog.
func (c *StockingLogClient) QueryActiveIngredient(sl *StockingLog) *ActiveIngredientQuery {
	query := (&ActiveIngredientClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(stockinglog.Table, stockinglog.FieldID, id),
			sqlgraph.To(activeingredient.Table, activeingredient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, stockinglog.ActiveIngredientTable, stockinglog.ActiveIngredientColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StockingLogClient) Hooks() []Hook {
	return c.hooks.StockingLog
}

// Interceptors returns the client interceptors.
func (c *StockingLogClient) Interceptors() []Interceptor {
	return c.inters.StockingLog
}

func (c *StockingLogClient) mutate(ctx context.Context, m *StockingLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StockingLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StockingLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StockingLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StockingLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StockingLog mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ActiveIngredient, ConsumptionLog, Medicine, Prescription, StockingLog []ent.Hook
	}
	inters struct {
		ActiveIngredient, ConsumptionLog, Medicine, Prescription,
		StockingLog []ent.Interceptor
	}
)
