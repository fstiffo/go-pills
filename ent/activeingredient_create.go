// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fstiffo/pills/ent/activeingredient"
	"fstiffo/pills/ent/medicine"
	"fstiffo/pills/ent/prescription"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActiveIngredientCreate is the builder for creating a ActiveIngredient entity.
type ActiveIngredientCreate struct {
	config
	mutation *ActiveIngredientMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (aic *ActiveIngredientCreate) SetName(s string) *ActiveIngredientCreate {
	aic.mutation.SetName(s)
	return aic
}

// AddMedicineIDs adds the "medicines" edge to the Medicine entity by IDs.
func (aic *ActiveIngredientCreate) AddMedicineIDs(ids ...int) *ActiveIngredientCreate {
	aic.mutation.AddMedicineIDs(ids...)
	return aic
}

// AddMedicines adds the "medicines" edges to the Medicine entity.
func (aic *ActiveIngredientCreate) AddMedicines(m ...*Medicine) *ActiveIngredientCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return aic.AddMedicineIDs(ids...)
}

// AddPrescriptionIDs adds the "prescriptions" edge to the Prescription entity by IDs.
func (aic *ActiveIngredientCreate) AddPrescriptionIDs(ids ...int) *ActiveIngredientCreate {
	aic.mutation.AddPrescriptionIDs(ids...)
	return aic
}

// AddPrescriptions adds the "prescriptions" edges to the Prescription entity.
func (aic *ActiveIngredientCreate) AddPrescriptions(p ...*Prescription) *ActiveIngredientCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return aic.AddPrescriptionIDs(ids...)
}

// Mutation returns the ActiveIngredientMutation object of the builder.
func (aic *ActiveIngredientCreate) Mutation() *ActiveIngredientMutation {
	return aic.mutation
}

// Save creates the ActiveIngredient in the database.
func (aic *ActiveIngredientCreate) Save(ctx context.Context) (*ActiveIngredient, error) {
	return withHooks(ctx, aic.sqlSave, aic.mutation, aic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aic *ActiveIngredientCreate) SaveX(ctx context.Context) *ActiveIngredient {
	v, err := aic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aic *ActiveIngredientCreate) Exec(ctx context.Context) error {
	_, err := aic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aic *ActiveIngredientCreate) ExecX(ctx context.Context) {
	if err := aic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aic *ActiveIngredientCreate) check() error {
	if _, ok := aic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "ActiveIngredient.name"`)}
	}
	if v, ok := aic.mutation.Name(); ok {
		if err := activeingredient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ActiveIngredient.name": %w`, err)}
		}
	}
	return nil
}

func (aic *ActiveIngredientCreate) sqlSave(ctx context.Context) (*ActiveIngredient, error) {
	if err := aic.check(); err != nil {
		return nil, err
	}
	_node, _spec := aic.createSpec()
	if err := sqlgraph.CreateNode(ctx, aic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	aic.mutation.id = &_node.ID
	aic.mutation.done = true
	return _node, nil
}

func (aic *ActiveIngredientCreate) createSpec() (*ActiveIngredient, *sqlgraph.CreateSpec) {
	var (
		_node = &ActiveIngredient{config: aic.config}
		_spec = sqlgraph.NewCreateSpec(activeingredient.Table, sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt))
	)
	if value, ok := aic.mutation.Name(); ok {
		_spec.SetField(activeingredient.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := aic.mutation.MedicinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.MedicinesTable,
			Columns: []string{activeingredient.MedicinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := aic.mutation.PrescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.PrescriptionsTable,
			Columns: []string{activeingredient.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActiveIngredientCreateBulk is the builder for creating many ActiveIngredient entities in bulk.
type ActiveIngredientCreateBulk struct {
	config
	err      error
	builders []*ActiveIngredientCreate
}

// Save creates the ActiveIngredient entities in the database.
func (aicb *ActiveIngredientCreateBulk) Save(ctx context.Context) ([]*ActiveIngredient, error) {
	if aicb.err != nil {
		return nil, aicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aicb.builders))
	nodes := make([]*ActiveIngredient, len(aicb.builders))
	mutators := make([]Mutator, len(aicb.builders))
	for i := range aicb.builders {
		func(i int, root context.Context) {
			builder := aicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActiveIngredientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aicb *ActiveIngredientCreateBulk) SaveX(ctx context.Context) []*ActiveIngredient {
	v, err := aicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aicb *ActiveIngredientCreateBulk) Exec(ctx context.Context) error {
	_, err := aicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aicb *ActiveIngredientCreateBulk) ExecX(ctx context.Context) {
	if err := aicb.Exec(ctx); err != nil {
		panic(err)
	}
}
