// Code generated by ent, DO NOT EDIT.

package purchase

import (
	"fstiffo/pills/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Purchase {
	return predicate.Purchase(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Purchase {
	return predicate.Purchase(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Purchase {
	return predicate.Purchase(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Purchase {
	return predicate.Purchase(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Purchase {
	return predicate.Purchase(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Purchase {
	return predicate.Purchase(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Purchase {
	return predicate.Purchase(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Purchase {
	return predicate.Purchase(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Purchase {
	return predicate.Purchase(sql.FieldLTE(FieldID, id))
}

// PuchasedAt applies equality check predicate on the "puchased_at" field. It's identical to PuchasedAtEQ.
func PuchasedAt(v time.Time) predicate.Purchase {
	return predicate.Purchase(sql.FieldEQ(FieldPuchasedAt, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.Purchase {
	return predicate.Purchase(sql.FieldEQ(FieldQuantity, v))
}

// PuchasedAtEQ applies the EQ predicate on the "puchased_at" field.
func PuchasedAtEQ(v time.Time) predicate.Purchase {
	return predicate.Purchase(sql.FieldEQ(FieldPuchasedAt, v))
}

// PuchasedAtNEQ applies the NEQ predicate on the "puchased_at" field.
func PuchasedAtNEQ(v time.Time) predicate.Purchase {
	return predicate.Purchase(sql.FieldNEQ(FieldPuchasedAt, v))
}

// PuchasedAtIn applies the In predicate on the "puchased_at" field.
func PuchasedAtIn(vs ...time.Time) predicate.Purchase {
	return predicate.Purchase(sql.FieldIn(FieldPuchasedAt, vs...))
}

// PuchasedAtNotIn applies the NotIn predicate on the "puchased_at" field.
func PuchasedAtNotIn(vs ...time.Time) predicate.Purchase {
	return predicate.Purchase(sql.FieldNotIn(FieldPuchasedAt, vs...))
}

// PuchasedAtGT applies the GT predicate on the "puchased_at" field.
func PuchasedAtGT(v time.Time) predicate.Purchase {
	return predicate.Purchase(sql.FieldGT(FieldPuchasedAt, v))
}

// PuchasedAtGTE applies the GTE predicate on the "puchased_at" field.
func PuchasedAtGTE(v time.Time) predicate.Purchase {
	return predicate.Purchase(sql.FieldGTE(FieldPuchasedAt, v))
}

// PuchasedAtLT applies the LT predicate on the "puchased_at" field.
func PuchasedAtLT(v time.Time) predicate.Purchase {
	return predicate.Purchase(sql.FieldLT(FieldPuchasedAt, v))
}

// PuchasedAtLTE applies the LTE predicate on the "puchased_at" field.
func PuchasedAtLTE(v time.Time) predicate.Purchase {
	return predicate.Purchase(sql.FieldLTE(FieldPuchasedAt, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.Purchase {
	return predicate.Purchase(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.Purchase {
	return predicate.Purchase(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.Purchase {
	return predicate.Purchase(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.Purchase {
	return predicate.Purchase(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.Purchase {
	return predicate.Purchase(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.Purchase {
	return predicate.Purchase(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.Purchase {
	return predicate.Purchase(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.Purchase {
	return predicate.Purchase(sql.FieldLTE(FieldQuantity, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Purchase) predicate.Purchase {
	return predicate.Purchase(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Purchase) predicate.Purchase {
	return predicate.Purchase(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Purchase) predicate.Purchase {
	return predicate.Purchase(sql.NotPredicates(p))
}
