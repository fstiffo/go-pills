// Code generated by ent, DO NOT EDIT.

package purchase

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the purchase type in the database.
	Label = "purchase"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPuchasedAt holds the string denoting the puchased_at field in the database.
	FieldPuchasedAt = "puchased_at"
	// FieldQuantity holds the string denoting the quantity field in the database.
	FieldQuantity = "quantity"
	// Table holds the table name of the purchase in the database.
	Table = "purchases"
)

// Columns holds all SQL columns for purchase fields.
var Columns = []string{
	FieldID,
	FieldPuchasedAt,
	FieldQuantity,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "purchases"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"medicine_purchases",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// QuantityValidator is a validator for the "quantity" field. It is called by the builders before save.
	QuantityValidator func(int) error
)

// OrderOption defines the ordering options for the Purchase queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPuchasedAt orders the results by the puchased_at field.
func ByPuchasedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPuchasedAt, opts...).ToFunc()
}

// ByQuantity orders the results by the quantity field.
func ByQuantity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuantity, opts...).ToFunc()
}
