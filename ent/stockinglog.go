// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"fstiffo/pills/ent/medicine"
	"fstiffo/pills/ent/stockinglog"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// StockingLog is the model entity for the StockingLog schema.
type StockingLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StockedAt holds the value of the "stocked_at" field.
	StockedAt time.Time `json:"stocked_at,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StockingLogQuery when eager-loading is set.
	Edges                  StockingLogEdges `json:"edges"`
	medicine_stocking_logs *int
	selectValues           sql.SelectValues
}

// StockingLogEdges holds the relations/edges for other nodes in the graph.
type StockingLogEdges struct {
	// Medicine holds the value of the medicine edge.
	Medicine *Medicine `json:"medicine,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MedicineOrErr returns the Medicine value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StockingLogEdges) MedicineOrErr() (*Medicine, error) {
	if e.Medicine != nil {
		return e.Medicine, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: medicine.Label}
	}
	return nil, &NotLoadedError{edge: "medicine"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StockingLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stockinglog.FieldID, stockinglog.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case stockinglog.FieldStockedAt:
			values[i] = new(sql.NullTime)
		case stockinglog.ForeignKeys[0]: // medicine_stocking_logs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StockingLog fields.
func (sl *StockingLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stockinglog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sl.ID = int(value.Int64)
		case stockinglog.FieldStockedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stocked_at", values[i])
			} else if value.Valid {
				sl.StockedAt = value.Time
			}
		case stockinglog.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				sl.Quantity = int(value.Int64)
			}
		case stockinglog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field medicine_stocking_logs", value)
			} else if value.Valid {
				sl.medicine_stocking_logs = new(int)
				*sl.medicine_stocking_logs = int(value.Int64)
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StockingLog.
// This includes values selected through modifiers, order, etc.
func (sl *StockingLog) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// QueryMedicine queries the "medicine" edge of the StockingLog entity.
func (sl *StockingLog) QueryMedicine() *MedicineQuery {
	return NewStockingLogClient(sl.config).QueryMedicine(sl)
}

// Update returns a builder for updating this StockingLog.
// Note that you need to call StockingLog.Unwrap() before calling this method if this StockingLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *StockingLog) Update() *StockingLogUpdateOne {
	return NewStockingLogClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the StockingLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *StockingLog) Unwrap() *StockingLog {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: StockingLog is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *StockingLog) String() string {
	var builder strings.Builder
	builder.WriteString("StockingLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("stocked_at=")
	builder.WriteString(sl.StockedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", sl.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// StockingLogs is a parsable slice of StockingLog.
type StockingLogs []*StockingLog
