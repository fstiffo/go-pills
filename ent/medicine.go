// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"fstiffo/pills/ent/activeingredient"
	"fstiffo/pills/ent/medicine"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Medicine is the model entity for the Medicine schema.
type Medicine struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Mah holds the value of the "mah" field.
	Mah string `json:"mah,omitempty"`
	// Dosage holds the value of the "dosage" field.
	Dosage float64 `json:"dosage,omitempty"`
	// Unit holds the value of the "unit" field.
	Unit string `json:"unit,omitempty"`
	// Atc holds the value of the "atc" field.
	Atc string `json:"atc,omitempty"`
	// Package holds the value of the "package" field.
	Package string `json:"package,omitempty"`
	// Form holds the value of the "form" field.
	Form string `json:"form,omitempty"`
	// BoxSize holds the value of the "box_size" field.
	BoxSize int `json:"box_size,omitempty"`
	// Stock holds the value of the "stock" field.
	Stock float32 `json:"stock,omitempty"`
	// LastStockUpdate holds the value of the "last_stock_update" field.
	LastStockUpdate time.Time `json:"last_stock_update,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MedicineQuery when eager-loading is set.
	Edges                       MedicineEdges `json:"edges"`
	active_ingredient_medicines *int
	selectValues                sql.SelectValues
}

// MedicineEdges holds the relations/edges for other nodes in the graph.
type MedicineEdges struct {
	// Purchases holds the value of the purchases edge.
	Purchases []*Purchase `json:"purchases,omitempty"`
	// StockingLogs holds the value of the stocking_logs edge.
	StockingLogs []*StockingLog `json:"stocking_logs,omitempty"`
	// ActiveIngredient holds the value of the active_ingredient edge.
	ActiveIngredient *ActiveIngredient `json:"active_ingredient,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PurchasesOrErr returns the Purchases value or an error if the edge
// was not loaded in eager-loading.
func (e MedicineEdges) PurchasesOrErr() ([]*Purchase, error) {
	if e.loadedTypes[0] {
		return e.Purchases, nil
	}
	return nil, &NotLoadedError{edge: "purchases"}
}

// StockingLogsOrErr returns the StockingLogs value or an error if the edge
// was not loaded in eager-loading.
func (e MedicineEdges) StockingLogsOrErr() ([]*StockingLog, error) {
	if e.loadedTypes[1] {
		return e.StockingLogs, nil
	}
	return nil, &NotLoadedError{edge: "stocking_logs"}
}

// ActiveIngredientOrErr returns the ActiveIngredient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MedicineEdges) ActiveIngredientOrErr() (*ActiveIngredient, error) {
	if e.ActiveIngredient != nil {
		return e.ActiveIngredient, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: activeingredient.Label}
	}
	return nil, &NotLoadedError{edge: "active_ingredient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Medicine) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case medicine.FieldDosage, medicine.FieldStock:
			values[i] = new(sql.NullFloat64)
		case medicine.FieldID, medicine.FieldBoxSize:
			values[i] = new(sql.NullInt64)
		case medicine.FieldName, medicine.FieldMah, medicine.FieldUnit, medicine.FieldAtc, medicine.FieldPackage, medicine.FieldForm:
			values[i] = new(sql.NullString)
		case medicine.FieldLastStockUpdate:
			values[i] = new(sql.NullTime)
		case medicine.ForeignKeys[0]: // active_ingredient_medicines
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Medicine fields.
func (m *Medicine) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case medicine.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case medicine.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				m.Name = value.String
			}
		case medicine.FieldMah:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mah", values[i])
			} else if value.Valid {
				m.Mah = value.String
			}
		case medicine.FieldDosage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field dosage", values[i])
			} else if value.Valid {
				m.Dosage = value.Float64
			}
		case medicine.FieldUnit:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field unit", values[i])
			} else if value.Valid {
				m.Unit = value.String
			}
		case medicine.FieldAtc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field atc", values[i])
			} else if value.Valid {
				m.Atc = value.String
			}
		case medicine.FieldPackage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package", values[i])
			} else if value.Valid {
				m.Package = value.String
			}
		case medicine.FieldForm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form", values[i])
			} else if value.Valid {
				m.Form = value.String
			}
		case medicine.FieldBoxSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field box_size", values[i])
			} else if value.Valid {
				m.BoxSize = int(value.Int64)
			}
		case medicine.FieldStock:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field stock", values[i])
			} else if value.Valid {
				m.Stock = float32(value.Float64)
			}
		case medicine.FieldLastStockUpdate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_stock_update", values[i])
			} else if value.Valid {
				m.LastStockUpdate = value.Time
			}
		case medicine.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field active_ingredient_medicines", value)
			} else if value.Valid {
				m.active_ingredient_medicines = new(int)
				*m.active_ingredient_medicines = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Medicine.
// This includes values selected through modifiers, order, etc.
func (m *Medicine) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryPurchases queries the "purchases" edge of the Medicine entity.
func (m *Medicine) QueryPurchases() *PurchaseQuery {
	return NewMedicineClient(m.config).QueryPurchases(m)
}

// QueryStockingLogs queries the "stocking_logs" edge of the Medicine entity.
func (m *Medicine) QueryStockingLogs() *StockingLogQuery {
	return NewMedicineClient(m.config).QueryStockingLogs(m)
}

// QueryActiveIngredient queries the "active_ingredient" edge of the Medicine entity.
func (m *Medicine) QueryActiveIngredient() *ActiveIngredientQuery {
	return NewMedicineClient(m.config).QueryActiveIngredient(m)
}

// Update returns a builder for updating this Medicine.
// Note that you need to call Medicine.Unwrap() before calling this method if this Medicine
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Medicine) Update() *MedicineUpdateOne {
	return NewMedicineClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Medicine entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Medicine) Unwrap() *Medicine {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Medicine is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Medicine) String() string {
	var builder strings.Builder
	builder.WriteString("Medicine(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("name=")
	builder.WriteString(m.Name)
	builder.WriteString(", ")
	builder.WriteString("mah=")
	builder.WriteString(m.Mah)
	builder.WriteString(", ")
	builder.WriteString("dosage=")
	builder.WriteString(fmt.Sprintf("%v", m.Dosage))
	builder.WriteString(", ")
	builder.WriteString("unit=")
	builder.WriteString(m.Unit)
	builder.WriteString(", ")
	builder.WriteString("atc=")
	builder.WriteString(m.Atc)
	builder.WriteString(", ")
	builder.WriteString("package=")
	builder.WriteString(m.Package)
	builder.WriteString(", ")
	builder.WriteString("form=")
	builder.WriteString(m.Form)
	builder.WriteString(", ")
	builder.WriteString("box_size=")
	builder.WriteString(fmt.Sprintf("%v", m.BoxSize))
	builder.WriteString(", ")
	builder.WriteString("stock=")
	builder.WriteString(fmt.Sprintf("%v", m.Stock))
	builder.WriteString(", ")
	builder.WriteString("last_stock_update=")
	builder.WriteString(m.LastStockUpdate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Medicines is a parsable slice of Medicine.
type Medicines []*Medicine
