// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fstiffo/pills/ent/consumptionlog"
	"fstiffo/pills/ent/prescription"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConsumptionLogCreate is the builder for creating a ConsumptionLog entity.
type ConsumptionLogCreate struct {
	config
	mutation *ConsumptionLogMutation
	hooks    []Hook
}

// SetConsumedAt sets the "consumed_at" field.
func (clc *ConsumptionLogCreate) SetConsumedAt(t time.Time) *ConsumptionLogCreate {
	clc.mutation.SetConsumedAt(t)
	return clc
}

// SetNillableConsumedAt sets the "consumed_at" field if the given value is not nil.
func (clc *ConsumptionLogCreate) SetNillableConsumedAt(t *time.Time) *ConsumptionLogCreate {
	if t != nil {
		clc.SetConsumedAt(*t)
	}
	return clc
}

// SetUnits sets the "units" field.
func (clc *ConsumptionLogCreate) SetUnits(i int) *ConsumptionLogCreate {
	clc.mutation.SetUnits(i)
	return clc
}

// SetPrescriptionID sets the "prescription" edge to the Prescription entity by ID.
func (clc *ConsumptionLogCreate) SetPrescriptionID(id int) *ConsumptionLogCreate {
	clc.mutation.SetPrescriptionID(id)
	return clc
}

// SetNillablePrescriptionID sets the "prescription" edge to the Prescription entity by ID if the given value is not nil.
func (clc *ConsumptionLogCreate) SetNillablePrescriptionID(id *int) *ConsumptionLogCreate {
	if id != nil {
		clc = clc.SetPrescriptionID(*id)
	}
	return clc
}

// SetPrescription sets the "prescription" edge to the Prescription entity.
func (clc *ConsumptionLogCreate) SetPrescription(p *Prescription) *ConsumptionLogCreate {
	return clc.SetPrescriptionID(p.ID)
}

// Mutation returns the ConsumptionLogMutation object of the builder.
func (clc *ConsumptionLogCreate) Mutation() *ConsumptionLogMutation {
	return clc.mutation
}

// Save creates the ConsumptionLog in the database.
func (clc *ConsumptionLogCreate) Save(ctx context.Context) (*ConsumptionLog, error) {
	clc.defaults()
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *ConsumptionLogCreate) SaveX(ctx context.Context) *ConsumptionLog {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *ConsumptionLogCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *ConsumptionLogCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *ConsumptionLogCreate) defaults() {
	if _, ok := clc.mutation.ConsumedAt(); !ok {
		v := consumptionlog.DefaultConsumedAt()
		clc.mutation.SetConsumedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *ConsumptionLogCreate) check() error {
	if _, ok := clc.mutation.Units(); !ok {
		return &ValidationError{Name: "units", err: errors.New(`ent: missing required field "ConsumptionLog.units"`)}
	}
	if v, ok := clc.mutation.Units(); ok {
		if err := consumptionlog.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "ConsumptionLog.units": %w`, err)}
		}
	}
	return nil
}

func (clc *ConsumptionLogCreate) sqlSave(ctx context.Context) (*ConsumptionLog, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *ConsumptionLogCreate) createSpec() (*ConsumptionLog, *sqlgraph.CreateSpec) {
	var (
		_node = &ConsumptionLog{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(consumptionlog.Table, sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt))
	)
	if value, ok := clc.mutation.ConsumedAt(); ok {
		_spec.SetField(consumptionlog.FieldConsumedAt, field.TypeTime, value)
		_node.ConsumedAt = value
	}
	if value, ok := clc.mutation.Units(); ok {
		_spec.SetField(consumptionlog.FieldUnits, field.TypeInt, value)
		_node.Units = value
	}
	if nodes := clc.mutation.PrescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   consumptionlog.PrescriptionTable,
			Columns: []string{consumptionlog.PrescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.prescription_comsumption_logs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConsumptionLogCreateBulk is the builder for creating many ConsumptionLog entities in bulk.
type ConsumptionLogCreateBulk struct {
	config
	err      error
	builders []*ConsumptionLogCreate
}

// Save creates the ConsumptionLog entities in the database.
func (clcb *ConsumptionLogCreateBulk) Save(ctx context.Context) ([]*ConsumptionLog, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*ConsumptionLog, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConsumptionLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *ConsumptionLogCreateBulk) SaveX(ctx context.Context) []*ConsumptionLog {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *ConsumptionLogCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *ConsumptionLogCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
