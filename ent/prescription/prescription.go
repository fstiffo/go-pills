// Code generated by ent, DO NOT EDIT.

package prescription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the prescription type in the database.
	Label = "prescription"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDosage holds the string denoting the dosage field in the database.
	FieldDosage = "dosage"
	// FieldUnit holds the string denoting the unit field in the database.
	FieldUnit = "unit"
	// FieldDosageFrequency holds the string denoting the dosage_frequency field in the database.
	FieldDosageFrequency = "dosage_frequency"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// EdgeComsumptionLogs holds the string denoting the comsumption_logs edge name in mutations.
	EdgeComsumptionLogs = "comsumption_logs"
	// EdgeActiveIngredient holds the string denoting the active_ingredient edge name in mutations.
	EdgeActiveIngredient = "active_ingredient"
	// Table holds the table name of the prescription in the database.
	Table = "prescriptions"
	// ComsumptionLogsTable is the table that holds the comsumption_logs relation/edge.
	ComsumptionLogsTable = "consumption_logs"
	// ComsumptionLogsInverseTable is the table name for the ConsumptionLog entity.
	// It exists in this package in order to avoid circular dependency with the "consumptionlog" package.
	ComsumptionLogsInverseTable = "consumption_logs"
	// ComsumptionLogsColumn is the table column denoting the comsumption_logs relation/edge.
	ComsumptionLogsColumn = "prescription_comsumption_logs"
	// ActiveIngredientTable is the table that holds the active_ingredient relation/edge.
	ActiveIngredientTable = "prescriptions"
	// ActiveIngredientInverseTable is the table name for the ActiveIngredient entity.
	// It exists in this package in order to avoid circular dependency with the "activeingredient" package.
	ActiveIngredientInverseTable = "active_ingredients"
	// ActiveIngredientColumn is the table column denoting the active_ingredient relation/edge.
	ActiveIngredientColumn = "active_ingredient_prescriptions"
)

// Columns holds all SQL columns for prescription fields.
var Columns = []string{
	FieldID,
	FieldDosage,
	FieldUnit,
	FieldDosageFrequency,
	FieldStartDate,
	FieldEndDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "prescriptions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"active_ingredient_prescriptions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DosageValidator is a validator for the "dosage" field. It is called by the builders before save.
	DosageValidator func(int) error
	// UnitValidator is a validator for the "unit" field. It is called by the builders before save.
	UnitValidator func(string) error
	// DefaultDosageFrequency holds the default value on creation for the "dosage_frequency" field.
	DefaultDosageFrequency int
	// DosageFrequencyValidator is a validator for the "dosage_frequency" field. It is called by the builders before save.
	DosageFrequencyValidator func(int) error
	// DefaultStartDate holds the default value on creation for the "start_date" field.
	DefaultStartDate func() time.Time
)

// OrderOption defines the ordering options for the Prescription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDosage orders the results by the dosage field.
func ByDosage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDosage, opts...).ToFunc()
}

// ByUnit orders the results by the unit field.
func ByUnit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnit, opts...).ToFunc()
}

// ByDosageFrequency orders the results by the dosage_frequency field.
func ByDosageFrequency(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDosageFrequency, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByComsumptionLogsCount orders the results by comsumption_logs count.
func ByComsumptionLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newComsumptionLogsStep(), opts...)
	}
}

// ByComsumptionLogs orders the results by comsumption_logs terms.
func ByComsumptionLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newComsumptionLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActiveIngredientField orders the results by active_ingredient field.
func ByActiveIngredientField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActiveIngredientStep(), sql.OrderByField(field, opts...))
	}
}
func newComsumptionLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ComsumptionLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ComsumptionLogsTable, ComsumptionLogsColumn),
	)
}
func newActiveIngredientStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActiveIngredientInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ActiveIngredientTable, ActiveIngredientColumn),
	)
}
