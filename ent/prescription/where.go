// Code generated by ent, DO NOT EDIT.

package prescription

import (
	"fstiffo/pills/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldID, id))
}

// Dosage applies equality check predicate on the "dosage" field. It's identical to DosageEQ.
func Dosage(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldDosage, v))
}

// Unit applies equality check predicate on the "unit" field. It's identical to UnitEQ.
func Unit(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldUnit, v))
}

// DosageFrequency applies equality check predicate on the "dosage_frequency" field. It's identical to DosageFrequencyEQ.
func DosageFrequency(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldDosageFrequency, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldEndDate, v))
}

// DosageEQ applies the EQ predicate on the "dosage" field.
func DosageEQ(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldDosage, v))
}

// DosageNEQ applies the NEQ predicate on the "dosage" field.
func DosageNEQ(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldDosage, v))
}

// DosageIn applies the In predicate on the "dosage" field.
func DosageIn(vs ...int) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldDosage, vs...))
}

// DosageNotIn applies the NotIn predicate on the "dosage" field.
func DosageNotIn(vs ...int) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldDosage, vs...))
}

// DosageGT applies the GT predicate on the "dosage" field.
func DosageGT(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldDosage, v))
}

// DosageGTE applies the GTE predicate on the "dosage" field.
func DosageGTE(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldDosage, v))
}

// DosageLT applies the LT predicate on the "dosage" field.
func DosageLT(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldDosage, v))
}

// DosageLTE applies the LTE predicate on the "dosage" field.
func DosageLTE(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldDosage, v))
}

// UnitEQ applies the EQ predicate on the "unit" field.
func UnitEQ(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldUnit, v))
}

// UnitNEQ applies the NEQ predicate on the "unit" field.
func UnitNEQ(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldUnit, v))
}

// UnitIn applies the In predicate on the "unit" field.
func UnitIn(vs ...string) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldUnit, vs...))
}

// UnitNotIn applies the NotIn predicate on the "unit" field.
func UnitNotIn(vs ...string) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldUnit, vs...))
}

// UnitGT applies the GT predicate on the "unit" field.
func UnitGT(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldUnit, v))
}

// UnitGTE applies the GTE predicate on the "unit" field.
func UnitGTE(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldUnit, v))
}

// UnitLT applies the LT predicate on the "unit" field.
func UnitLT(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldUnit, v))
}

// UnitLTE applies the LTE predicate on the "unit" field.
func UnitLTE(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldUnit, v))
}

// UnitContains applies the Contains predicate on the "unit" field.
func UnitContains(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldContains(FieldUnit, v))
}

// UnitHasPrefix applies the HasPrefix predicate on the "unit" field.
func UnitHasPrefix(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldHasPrefix(FieldUnit, v))
}

// UnitHasSuffix applies the HasSuffix predicate on the "unit" field.
func UnitHasSuffix(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldHasSuffix(FieldUnit, v))
}

// UnitEqualFold applies the EqualFold predicate on the "unit" field.
func UnitEqualFold(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldEqualFold(FieldUnit, v))
}

// UnitContainsFold applies the ContainsFold predicate on the "unit" field.
func UnitContainsFold(v string) predicate.Prescription {
	return predicate.Prescription(sql.FieldContainsFold(FieldUnit, v))
}

// DosageFrequencyEQ applies the EQ predicate on the "dosage_frequency" field.
func DosageFrequencyEQ(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldDosageFrequency, v))
}

// DosageFrequencyNEQ applies the NEQ predicate on the "dosage_frequency" field.
func DosageFrequencyNEQ(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldDosageFrequency, v))
}

// DosageFrequencyIn applies the In predicate on the "dosage_frequency" field.
func DosageFrequencyIn(vs ...int) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldDosageFrequency, vs...))
}

// DosageFrequencyNotIn applies the NotIn predicate on the "dosage_frequency" field.
func DosageFrequencyNotIn(vs ...int) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldDosageFrequency, vs...))
}

// DosageFrequencyGT applies the GT predicate on the "dosage_frequency" field.
func DosageFrequencyGT(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldDosageFrequency, v))
}

// DosageFrequencyGTE applies the GTE predicate on the "dosage_frequency" field.
func DosageFrequencyGTE(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldDosageFrequency, v))
}

// DosageFrequencyLT applies the LT predicate on the "dosage_frequency" field.
func DosageFrequencyLT(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldDosageFrequency, v))
}

// DosageFrequencyLTE applies the LTE predicate on the "dosage_frequency" field.
func DosageFrequencyLTE(v int) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldDosageFrequency, v))
}

// DosageFrequencyIsNil applies the IsNil predicate on the "dosage_frequency" field.
func DosageFrequencyIsNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldIsNull(FieldDosageFrequency))
}

// DosageFrequencyNotNil applies the NotNil predicate on the "dosage_frequency" field.
func DosageFrequencyNotNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldNotNull(FieldDosageFrequency))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Prescription {
	return predicate.Prescription(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Prescription {
	return predicate.Prescription(sql.FieldNotNull(FieldEndDate))
}

// HasComsumptionLogs applies the HasEdge predicate on the "comsumption_logs" edge.
func HasComsumptionLogs() predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ComsumptionLogsTable, ComsumptionLogsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasComsumptionLogsWith applies the HasEdge predicate on the "comsumption_logs" edge with a given conditions (other predicates).
func HasComsumptionLogsWith(preds ...predicate.ConsumptionLog) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := newComsumptionLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActiveIngredient applies the HasEdge predicate on the "active_ingredient" edge.
func HasActiveIngredient() predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ActiveIngredientTable, ActiveIngredientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActiveIngredientWith applies the HasEdge predicate on the "active_ingredient" edge with a given conditions (other predicates).
func HasActiveIngredientWith(preds ...predicate.ActiveIngredient) predicate.Prescription {
	return predicate.Prescription(func(s *sql.Selector) {
		step := newActiveIngredientStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Prescription) predicate.Prescription {
	return predicate.Prescription(sql.NotPredicates(p))
}
