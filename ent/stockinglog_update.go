// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fstiffo/pills/ent/activeingredient"
	"fstiffo/pills/ent/medicine"
	"fstiffo/pills/ent/predicate"
	"fstiffo/pills/ent/stockinglog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StockingLogUpdate is the builder for updating StockingLog entities.
type StockingLogUpdate struct {
	config
	hooks    []Hook
	mutation *StockingLogMutation
}

// Where appends a list predicates to the StockingLogUpdate builder.
func (slu *StockingLogUpdate) Where(ps ...predicate.StockingLog) *StockingLogUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetStockedAt sets the "stocked_at" field.
func (slu *StockingLogUpdate) SetStockedAt(t time.Time) *StockingLogUpdate {
	slu.mutation.SetStockedAt(t)
	return slu
}

// SetNillableStockedAt sets the "stocked_at" field if the given value is not nil.
func (slu *StockingLogUpdate) SetNillableStockedAt(t *time.Time) *StockingLogUpdate {
	if t != nil {
		slu.SetStockedAt(*t)
	}
	return slu
}

// ClearStockedAt clears the value of the "stocked_at" field.
func (slu *StockingLogUpdate) ClearStockedAt() *StockingLogUpdate {
	slu.mutation.ClearStockedAt()
	return slu
}

// SetBoxes sets the "boxes" field.
func (slu *StockingLogUpdate) SetBoxes(i int) *StockingLogUpdate {
	slu.mutation.ResetBoxes()
	slu.mutation.SetBoxes(i)
	return slu
}

// SetNillableBoxes sets the "boxes" field if the given value is not nil.
func (slu *StockingLogUpdate) SetNillableBoxes(i *int) *StockingLogUpdate {
	if i != nil {
		slu.SetBoxes(*i)
	}
	return slu
}

// AddBoxes adds i to the "boxes" field.
func (slu *StockingLogUpdate) AddBoxes(i int) *StockingLogUpdate {
	slu.mutation.AddBoxes(i)
	return slu
}

// ClearBoxes clears the value of the "boxes" field.
func (slu *StockingLogUpdate) ClearBoxes() *StockingLogUpdate {
	slu.mutation.ClearBoxes()
	return slu
}

// SetUnits sets the "units" field.
func (slu *StockingLogUpdate) SetUnits(i int) *StockingLogUpdate {
	slu.mutation.ResetUnits()
	slu.mutation.SetUnits(i)
	return slu
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (slu *StockingLogUpdate) SetNillableUnits(i *int) *StockingLogUpdate {
	if i != nil {
		slu.SetUnits(*i)
	}
	return slu
}

// AddUnits adds i to the "units" field.
func (slu *StockingLogUpdate) AddUnits(i int) *StockingLogUpdate {
	slu.mutation.AddUnits(i)
	return slu
}

// SetMedicineID sets the "medicine" edge to the Medicine entity by ID.
func (slu *StockingLogUpdate) SetMedicineID(id int) *StockingLogUpdate {
	slu.mutation.SetMedicineID(id)
	return slu
}

// SetNillableMedicineID sets the "medicine" edge to the Medicine entity by ID if the given value is not nil.
func (slu *StockingLogUpdate) SetNillableMedicineID(id *int) *StockingLogUpdate {
	if id != nil {
		slu = slu.SetMedicineID(*id)
	}
	return slu
}

// SetMedicine sets the "medicine" edge to the Medicine entity.
func (slu *StockingLogUpdate) SetMedicine(m *Medicine) *StockingLogUpdate {
	return slu.SetMedicineID(m.ID)
}

// SetActiveIngredientID sets the "active_ingredient" edge to the ActiveIngredient entity by ID.
func (slu *StockingLogUpdate) SetActiveIngredientID(id int) *StockingLogUpdate {
	slu.mutation.SetActiveIngredientID(id)
	return slu
}

// SetNillableActiveIngredientID sets the "active_ingredient" edge to the ActiveIngredient entity by ID if the given value is not nil.
func (slu *StockingLogUpdate) SetNillableActiveIngredientID(id *int) *StockingLogUpdate {
	if id != nil {
		slu = slu.SetActiveIngredientID(*id)
	}
	return slu
}

// SetActiveIngredient sets the "active_ingredient" edge to the ActiveIngredient entity.
func (slu *StockingLogUpdate) SetActiveIngredient(a *ActiveIngredient) *StockingLogUpdate {
	return slu.SetActiveIngredientID(a.ID)
}

// Mutation returns the StockingLogMutation object of the builder.
func (slu *StockingLogUpdate) Mutation() *StockingLogMutation {
	return slu.mutation
}

// ClearMedicine clears the "medicine" edge to the Medicine entity.
func (slu *StockingLogUpdate) ClearMedicine() *StockingLogUpdate {
	slu.mutation.ClearMedicine()
	return slu
}

// ClearActiveIngredient clears the "active_ingredient" edge to the ActiveIngredient entity.
func (slu *StockingLogUpdate) ClearActiveIngredient() *StockingLogUpdate {
	slu.mutation.ClearActiveIngredient()
	return slu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *StockingLogUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *StockingLogUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *StockingLogUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *StockingLogUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *StockingLogUpdate) check() error {
	if v, ok := slu.mutation.Boxes(); ok {
		if err := stockinglog.BoxesValidator(v); err != nil {
			return &ValidationError{Name: "boxes", err: fmt.Errorf(`ent: validator failed for field "StockingLog.boxes": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Units(); ok {
		if err := stockinglog.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "StockingLog.units": %w`, err)}
		}
	}
	return nil
}

func (slu *StockingLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := slu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(stockinglog.Table, stockinglog.Columns, sqlgraph.NewFieldSpec(stockinglog.FieldID, field.TypeInt))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.StockedAt(); ok {
		_spec.SetField(stockinglog.FieldStockedAt, field.TypeTime, value)
	}
	if slu.mutation.StockedAtCleared() {
		_spec.ClearField(stockinglog.FieldStockedAt, field.TypeTime)
	}
	if value, ok := slu.mutation.Boxes(); ok {
		_spec.SetField(stockinglog.FieldBoxes, field.TypeInt, value)
	}
	if value, ok := slu.mutation.AddedBoxes(); ok {
		_spec.AddField(stockinglog.FieldBoxes, field.TypeInt, value)
	}
	if slu.mutation.BoxesCleared() {
		_spec.ClearField(stockinglog.FieldBoxes, field.TypeInt)
	}
	if value, ok := slu.mutation.Units(); ok {
		_spec.SetField(stockinglog.FieldUnits, field.TypeInt, value)
	}
	if value, ok := slu.mutation.AddedUnits(); ok {
		_spec.AddField(stockinglog.FieldUnits, field.TypeInt, value)
	}
	if slu.mutation.MedicineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockinglog.MedicineTable,
			Columns: []string{stockinglog.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.MedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockinglog.MedicineTable,
			Columns: []string{stockinglog.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if slu.mutation.ActiveIngredientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockinglog.ActiveIngredientTable,
			Columns: []string{stockinglog.ActiveIngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.ActiveIngredientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockinglog.ActiveIngredientTable,
			Columns: []string{stockinglog.ActiveIngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stockinglog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// StockingLogUpdateOne is the builder for updating a single StockingLog entity.
type StockingLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StockingLogMutation
}

// SetStockedAt sets the "stocked_at" field.
func (sluo *StockingLogUpdateOne) SetStockedAt(t time.Time) *StockingLogUpdateOne {
	sluo.mutation.SetStockedAt(t)
	return sluo
}

// SetNillableStockedAt sets the "stocked_at" field if the given value is not nil.
func (sluo *StockingLogUpdateOne) SetNillableStockedAt(t *time.Time) *StockingLogUpdateOne {
	if t != nil {
		sluo.SetStockedAt(*t)
	}
	return sluo
}

// ClearStockedAt clears the value of the "stocked_at" field.
func (sluo *StockingLogUpdateOne) ClearStockedAt() *StockingLogUpdateOne {
	sluo.mutation.ClearStockedAt()
	return sluo
}

// SetBoxes sets the "boxes" field.
func (sluo *StockingLogUpdateOne) SetBoxes(i int) *StockingLogUpdateOne {
	sluo.mutation.ResetBoxes()
	sluo.mutation.SetBoxes(i)
	return sluo
}

// SetNillableBoxes sets the "boxes" field if the given value is not nil.
func (sluo *StockingLogUpdateOne) SetNillableBoxes(i *int) *StockingLogUpdateOne {
	if i != nil {
		sluo.SetBoxes(*i)
	}
	return sluo
}

// AddBoxes adds i to the "boxes" field.
func (sluo *StockingLogUpdateOne) AddBoxes(i int) *StockingLogUpdateOne {
	sluo.mutation.AddBoxes(i)
	return sluo
}

// ClearBoxes clears the value of the "boxes" field.
func (sluo *StockingLogUpdateOne) ClearBoxes() *StockingLogUpdateOne {
	sluo.mutation.ClearBoxes()
	return sluo
}

// SetUnits sets the "units" field.
func (sluo *StockingLogUpdateOne) SetUnits(i int) *StockingLogUpdateOne {
	sluo.mutation.ResetUnits()
	sluo.mutation.SetUnits(i)
	return sluo
}

// SetNillableUnits sets the "units" field if the given value is not nil.
func (sluo *StockingLogUpdateOne) SetNillableUnits(i *int) *StockingLogUpdateOne {
	if i != nil {
		sluo.SetUnits(*i)
	}
	return sluo
}

// AddUnits adds i to the "units" field.
func (sluo *StockingLogUpdateOne) AddUnits(i int) *StockingLogUpdateOne {
	sluo.mutation.AddUnits(i)
	return sluo
}

// SetMedicineID sets the "medicine" edge to the Medicine entity by ID.
func (sluo *StockingLogUpdateOne) SetMedicineID(id int) *StockingLogUpdateOne {
	sluo.mutation.SetMedicineID(id)
	return sluo
}

// SetNillableMedicineID sets the "medicine" edge to the Medicine entity by ID if the given value is not nil.
func (sluo *StockingLogUpdateOne) SetNillableMedicineID(id *int) *StockingLogUpdateOne {
	if id != nil {
		sluo = sluo.SetMedicineID(*id)
	}
	return sluo
}

// SetMedicine sets the "medicine" edge to the Medicine entity.
func (sluo *StockingLogUpdateOne) SetMedicine(m *Medicine) *StockingLogUpdateOne {
	return sluo.SetMedicineID(m.ID)
}

// SetActiveIngredientID sets the "active_ingredient" edge to the ActiveIngredient entity by ID.
func (sluo *StockingLogUpdateOne) SetActiveIngredientID(id int) *StockingLogUpdateOne {
	sluo.mutation.SetActiveIngredientID(id)
	return sluo
}

// SetNillableActiveIngredientID sets the "active_ingredient" edge to the ActiveIngredient entity by ID if the given value is not nil.
func (sluo *StockingLogUpdateOne) SetNillableActiveIngredientID(id *int) *StockingLogUpdateOne {
	if id != nil {
		sluo = sluo.SetActiveIngredientID(*id)
	}
	return sluo
}

// SetActiveIngredient sets the "active_ingredient" edge to the ActiveIngredient entity.
func (sluo *StockingLogUpdateOne) SetActiveIngredient(a *ActiveIngredient) *StockingLogUpdateOne {
	return sluo.SetActiveIngredientID(a.ID)
}

// Mutation returns the StockingLogMutation object of the builder.
func (sluo *StockingLogUpdateOne) Mutation() *StockingLogMutation {
	return sluo.mutation
}

// ClearMedicine clears the "medicine" edge to the Medicine entity.
func (sluo *StockingLogUpdateOne) ClearMedicine() *StockingLogUpdateOne {
	sluo.mutation.ClearMedicine()
	return sluo
}

// ClearActiveIngredient clears the "active_ingredient" edge to the ActiveIngredient entity.
func (sluo *StockingLogUpdateOne) ClearActiveIngredient() *StockingLogUpdateOne {
	sluo.mutation.ClearActiveIngredient()
	return sluo
}

// Where appends a list predicates to the StockingLogUpdate builder.
func (sluo *StockingLogUpdateOne) Where(ps ...predicate.StockingLog) *StockingLogUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *StockingLogUpdateOne) Select(field string, fields ...string) *StockingLogUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated StockingLog entity.
func (sluo *StockingLogUpdateOne) Save(ctx context.Context) (*StockingLog, error) {
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *StockingLogUpdateOne) SaveX(ctx context.Context) *StockingLog {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *StockingLogUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *StockingLogUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *StockingLogUpdateOne) check() error {
	if v, ok := sluo.mutation.Boxes(); ok {
		if err := stockinglog.BoxesValidator(v); err != nil {
			return &ValidationError{Name: "boxes", err: fmt.Errorf(`ent: validator failed for field "StockingLog.boxes": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Units(); ok {
		if err := stockinglog.UnitsValidator(v); err != nil {
			return &ValidationError{Name: "units", err: fmt.Errorf(`ent: validator failed for field "StockingLog.units": %w`, err)}
		}
	}
	return nil
}

func (sluo *StockingLogUpdateOne) sqlSave(ctx context.Context) (_node *StockingLog, err error) {
	if err := sluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(stockinglog.Table, stockinglog.Columns, sqlgraph.NewFieldSpec(stockinglog.FieldID, field.TypeInt))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StockingLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stockinglog.FieldID)
		for _, f := range fields {
			if !stockinglog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stockinglog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.StockedAt(); ok {
		_spec.SetField(stockinglog.FieldStockedAt, field.TypeTime, value)
	}
	if sluo.mutation.StockedAtCleared() {
		_spec.ClearField(stockinglog.FieldStockedAt, field.TypeTime)
	}
	if value, ok := sluo.mutation.Boxes(); ok {
		_spec.SetField(stockinglog.FieldBoxes, field.TypeInt, value)
	}
	if value, ok := sluo.mutation.AddedBoxes(); ok {
		_spec.AddField(stockinglog.FieldBoxes, field.TypeInt, value)
	}
	if sluo.mutation.BoxesCleared() {
		_spec.ClearField(stockinglog.FieldBoxes, field.TypeInt)
	}
	if value, ok := sluo.mutation.Units(); ok {
		_spec.SetField(stockinglog.FieldUnits, field.TypeInt, value)
	}
	if value, ok := sluo.mutation.AddedUnits(); ok {
		_spec.AddField(stockinglog.FieldUnits, field.TypeInt, value)
	}
	if sluo.mutation.MedicineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockinglog.MedicineTable,
			Columns: []string{stockinglog.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.MedicineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockinglog.MedicineTable,
			Columns: []string{stockinglog.MedicineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sluo.mutation.ActiveIngredientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockinglog.ActiveIngredientTable,
			Columns: []string{stockinglog.ActiveIngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.ActiveIngredientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   stockinglog.ActiveIngredientTable,
			Columns: []string{stockinglog.ActiveIngredientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &StockingLog{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stockinglog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
