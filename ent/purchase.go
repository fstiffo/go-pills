// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"fstiffo/pills/ent/purchase"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Purchase is the model entity for the Purchase schema.
type Purchase struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PuchasedAt holds the value of the "puchased_at" field.
	PuchasedAt time.Time `json:"puchased_at,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity           int `json:"quantity,omitempty"`
	medicine_purchases *int
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Purchase) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case purchase.FieldID, purchase.FieldQuantity:
			values[i] = new(sql.NullInt64)
		case purchase.FieldPuchasedAt:
			values[i] = new(sql.NullTime)
		case purchase.ForeignKeys[0]: // medicine_purchases
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Purchase fields.
func (pu *Purchase) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case purchase.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pu.ID = int(value.Int64)
		case purchase.FieldPuchasedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field puchased_at", values[i])
			} else if value.Valid {
				pu.PuchasedAt = value.Time
			}
		case purchase.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				pu.Quantity = int(value.Int64)
			}
		case purchase.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field medicine_purchases", value)
			} else if value.Valid {
				pu.medicine_purchases = new(int)
				*pu.medicine_purchases = int(value.Int64)
			}
		default:
			pu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Purchase.
// This includes values selected through modifiers, order, etc.
func (pu *Purchase) Value(name string) (ent.Value, error) {
	return pu.selectValues.Get(name)
}

// Update returns a builder for updating this Purchase.
// Note that you need to call Purchase.Unwrap() before calling this method if this Purchase
// was returned from a transaction, and the transaction was committed or rolled back.
func (pu *Purchase) Update() *PurchaseUpdateOne {
	return NewPurchaseClient(pu.config).UpdateOne(pu)
}

// Unwrap unwraps the Purchase entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pu *Purchase) Unwrap() *Purchase {
	_tx, ok := pu.config.driver.(*txDriver)
	if !ok {
		panic("ent: Purchase is not a transactional entity")
	}
	pu.config.driver = _tx.drv
	return pu
}

// String implements the fmt.Stringer.
func (pu *Purchase) String() string {
	var builder strings.Builder
	builder.WriteString("Purchase(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pu.ID))
	builder.WriteString("puchased_at=")
	builder.WriteString(pu.PuchasedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", pu.Quantity))
	builder.WriteByte(')')
	return builder.String()
}

// Purchases is a parsable slice of Purchase.
type Purchases []*Purchase
