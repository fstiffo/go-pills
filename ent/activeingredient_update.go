// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"fstiffo/pills/ent/activeingredient"
	"fstiffo/pills/ent/consumptionlog"
	"fstiffo/pills/ent/medicine"
	"fstiffo/pills/ent/predicate"
	"fstiffo/pills/ent/prescription"
	"fstiffo/pills/ent/stockinglog"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ActiveIngredientUpdate is the builder for updating ActiveIngredient entities.
type ActiveIngredientUpdate struct {
	config
	hooks    []Hook
	mutation *ActiveIngredientMutation
}

// Where appends a list predicates to the ActiveIngredientUpdate builder.
func (aiu *ActiveIngredientUpdate) Where(ps ...predicate.ActiveIngredient) *ActiveIngredientUpdate {
	aiu.mutation.Where(ps...)
	return aiu
}

// SetName sets the "name" field.
func (aiu *ActiveIngredientUpdate) SetName(s string) *ActiveIngredientUpdate {
	aiu.mutation.SetName(s)
	return aiu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aiu *ActiveIngredientUpdate) SetNillableName(s *string) *ActiveIngredientUpdate {
	if s != nil {
		aiu.SetName(*s)
	}
	return aiu
}

// SetStock sets the "stock" field.
func (aiu *ActiveIngredientUpdate) SetStock(i int) *ActiveIngredientUpdate {
	aiu.mutation.ResetStock()
	aiu.mutation.SetStock(i)
	return aiu
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (aiu *ActiveIngredientUpdate) SetNillableStock(i *int) *ActiveIngredientUpdate {
	if i != nil {
		aiu.SetStock(*i)
	}
	return aiu
}

// AddStock adds i to the "stock" field.
func (aiu *ActiveIngredientUpdate) AddStock(i int) *ActiveIngredientUpdate {
	aiu.mutation.AddStock(i)
	return aiu
}

// ClearStock clears the value of the "stock" field.
func (aiu *ActiveIngredientUpdate) ClearStock() *ActiveIngredientUpdate {
	aiu.mutation.ClearStock()
	return aiu
}

// SetUnit sets the "unit" field.
func (aiu *ActiveIngredientUpdate) SetUnit(a activeingredient.Unit) *ActiveIngredientUpdate {
	aiu.mutation.SetUnit(a)
	return aiu
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (aiu *ActiveIngredientUpdate) SetNillableUnit(a *activeingredient.Unit) *ActiveIngredientUpdate {
	if a != nil {
		aiu.SetUnit(*a)
	}
	return aiu
}

// ClearUnit clears the value of the "unit" field.
func (aiu *ActiveIngredientUpdate) ClearUnit() *ActiveIngredientUpdate {
	aiu.mutation.ClearUnit()
	return aiu
}

// SetLastStockedAt sets the "last_stocked_at" field.
func (aiu *ActiveIngredientUpdate) SetLastStockedAt(t time.Time) *ActiveIngredientUpdate {
	aiu.mutation.SetLastStockedAt(t)
	return aiu
}

// SetNillableLastStockedAt sets the "last_stocked_at" field if the given value is not nil.
func (aiu *ActiveIngredientUpdate) SetNillableLastStockedAt(t *time.Time) *ActiveIngredientUpdate {
	if t != nil {
		aiu.SetLastStockedAt(*t)
	}
	return aiu
}

// SetLastConsumedAt sets the "last_consumed_at" field.
func (aiu *ActiveIngredientUpdate) SetLastConsumedAt(t time.Time) *ActiveIngredientUpdate {
	aiu.mutation.SetLastConsumedAt(t)
	return aiu
}

// SetNillableLastConsumedAt sets the "last_consumed_at" field if the given value is not nil.
func (aiu *ActiveIngredientUpdate) SetNillableLastConsumedAt(t *time.Time) *ActiveIngredientUpdate {
	if t != nil {
		aiu.SetLastConsumedAt(*t)
	}
	return aiu
}

// AddMedicineIDs adds the "medicines" edge to the Medicine entity by IDs.
func (aiu *ActiveIngredientUpdate) AddMedicineIDs(ids ...int) *ActiveIngredientUpdate {
	aiu.mutation.AddMedicineIDs(ids...)
	return aiu
}

// AddMedicines adds the "medicines" edges to the Medicine entity.
func (aiu *ActiveIngredientUpdate) AddMedicines(m ...*Medicine) *ActiveIngredientUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return aiu.AddMedicineIDs(ids...)
}

// AddPrescriptionIDs adds the "prescriptions" edge to the Prescription entity by IDs.
func (aiu *ActiveIngredientUpdate) AddPrescriptionIDs(ids ...int) *ActiveIngredientUpdate {
	aiu.mutation.AddPrescriptionIDs(ids...)
	return aiu
}

// AddPrescriptions adds the "prescriptions" edges to the Prescription entity.
func (aiu *ActiveIngredientUpdate) AddPrescriptions(p ...*Prescription) *ActiveIngredientUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return aiu.AddPrescriptionIDs(ids...)
}

// AddStockingLogIDs adds the "stocking_logs" edge to the StockingLog entity by IDs.
func (aiu *ActiveIngredientUpdate) AddStockingLogIDs(ids ...int) *ActiveIngredientUpdate {
	aiu.mutation.AddStockingLogIDs(ids...)
	return aiu
}

// AddStockingLogs adds the "stocking_logs" edges to the StockingLog entity.
func (aiu *ActiveIngredientUpdate) AddStockingLogs(s ...*StockingLog) *ActiveIngredientUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aiu.AddStockingLogIDs(ids...)
}

// AddConsumptionLogIDs adds the "consumption_logs" edge to the ConsumptionLog entity by IDs.
func (aiu *ActiveIngredientUpdate) AddConsumptionLogIDs(ids ...int) *ActiveIngredientUpdate {
	aiu.mutation.AddConsumptionLogIDs(ids...)
	return aiu
}

// AddConsumptionLogs adds the "consumption_logs" edges to the ConsumptionLog entity.
func (aiu *ActiveIngredientUpdate) AddConsumptionLogs(c ...*ConsumptionLog) *ActiveIngredientUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return aiu.AddConsumptionLogIDs(ids...)
}

// Mutation returns the ActiveIngredientMutation object of the builder.
func (aiu *ActiveIngredientUpdate) Mutation() *ActiveIngredientMutation {
	return aiu.mutation
}

// ClearMedicines clears all "medicines" edges to the Medicine entity.
func (aiu *ActiveIngredientUpdate) ClearMedicines() *ActiveIngredientUpdate {
	aiu.mutation.ClearMedicines()
	return aiu
}

// RemoveMedicineIDs removes the "medicines" edge to Medicine entities by IDs.
func (aiu *ActiveIngredientUpdate) RemoveMedicineIDs(ids ...int) *ActiveIngredientUpdate {
	aiu.mutation.RemoveMedicineIDs(ids...)
	return aiu
}

// RemoveMedicines removes "medicines" edges to Medicine entities.
func (aiu *ActiveIngredientUpdate) RemoveMedicines(m ...*Medicine) *ActiveIngredientUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return aiu.RemoveMedicineIDs(ids...)
}

// ClearPrescriptions clears all "prescriptions" edges to the Prescription entity.
func (aiu *ActiveIngredientUpdate) ClearPrescriptions() *ActiveIngredientUpdate {
	aiu.mutation.ClearPrescriptions()
	return aiu
}

// RemovePrescriptionIDs removes the "prescriptions" edge to Prescription entities by IDs.
func (aiu *ActiveIngredientUpdate) RemovePrescriptionIDs(ids ...int) *ActiveIngredientUpdate {
	aiu.mutation.RemovePrescriptionIDs(ids...)
	return aiu
}

// RemovePrescriptions removes "prescriptions" edges to Prescription entities.
func (aiu *ActiveIngredientUpdate) RemovePrescriptions(p ...*Prescription) *ActiveIngredientUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return aiu.RemovePrescriptionIDs(ids...)
}

// ClearStockingLogs clears all "stocking_logs" edges to the StockingLog entity.
func (aiu *ActiveIngredientUpdate) ClearStockingLogs() *ActiveIngredientUpdate {
	aiu.mutation.ClearStockingLogs()
	return aiu
}

// RemoveStockingLogIDs removes the "stocking_logs" edge to StockingLog entities by IDs.
func (aiu *ActiveIngredientUpdate) RemoveStockingLogIDs(ids ...int) *ActiveIngredientUpdate {
	aiu.mutation.RemoveStockingLogIDs(ids...)
	return aiu
}

// RemoveStockingLogs removes "stocking_logs" edges to StockingLog entities.
func (aiu *ActiveIngredientUpdate) RemoveStockingLogs(s ...*StockingLog) *ActiveIngredientUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aiu.RemoveStockingLogIDs(ids...)
}

// ClearConsumptionLogs clears all "consumption_logs" edges to the ConsumptionLog entity.
func (aiu *ActiveIngredientUpdate) ClearConsumptionLogs() *ActiveIngredientUpdate {
	aiu.mutation.ClearConsumptionLogs()
	return aiu
}

// RemoveConsumptionLogIDs removes the "consumption_logs" edge to ConsumptionLog entities by IDs.
func (aiu *ActiveIngredientUpdate) RemoveConsumptionLogIDs(ids ...int) *ActiveIngredientUpdate {
	aiu.mutation.RemoveConsumptionLogIDs(ids...)
	return aiu
}

// RemoveConsumptionLogs removes "consumption_logs" edges to ConsumptionLog entities.
func (aiu *ActiveIngredientUpdate) RemoveConsumptionLogs(c ...*ConsumptionLog) *ActiveIngredientUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return aiu.RemoveConsumptionLogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aiu *ActiveIngredientUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aiu.sqlSave, aiu.mutation, aiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiu *ActiveIngredientUpdate) SaveX(ctx context.Context) int {
	affected, err := aiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aiu *ActiveIngredientUpdate) Exec(ctx context.Context) error {
	_, err := aiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiu *ActiveIngredientUpdate) ExecX(ctx context.Context) {
	if err := aiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiu *ActiveIngredientUpdate) check() error {
	if v, ok := aiu.mutation.Name(); ok {
		if err := activeingredient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ActiveIngredient.name": %w`, err)}
		}
	}
	if v, ok := aiu.mutation.Unit(); ok {
		if err := activeingredient.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "ActiveIngredient.unit": %w`, err)}
		}
	}
	return nil
}

func (aiu *ActiveIngredientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(activeingredient.Table, activeingredient.Columns, sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt))
	if ps := aiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiu.mutation.Name(); ok {
		_spec.SetField(activeingredient.FieldName, field.TypeString, value)
	}
	if value, ok := aiu.mutation.Stock(); ok {
		_spec.SetField(activeingredient.FieldStock, field.TypeInt, value)
	}
	if value, ok := aiu.mutation.AddedStock(); ok {
		_spec.AddField(activeingredient.FieldStock, field.TypeInt, value)
	}
	if aiu.mutation.StockCleared() {
		_spec.ClearField(activeingredient.FieldStock, field.TypeInt)
	}
	if value, ok := aiu.mutation.Unit(); ok {
		_spec.SetField(activeingredient.FieldUnit, field.TypeEnum, value)
	}
	if aiu.mutation.UnitCleared() {
		_spec.ClearField(activeingredient.FieldUnit, field.TypeEnum)
	}
	if value, ok := aiu.mutation.LastStockedAt(); ok {
		_spec.SetField(activeingredient.FieldLastStockedAt, field.TypeTime, value)
	}
	if value, ok := aiu.mutation.LastConsumedAt(); ok {
		_spec.SetField(activeingredient.FieldLastConsumedAt, field.TypeTime, value)
	}
	if aiu.mutation.MedicinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.MedicinesTable,
			Columns: []string{activeingredient.MedicinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.RemovedMedicinesIDs(); len(nodes) > 0 && !aiu.mutation.MedicinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.MedicinesTable,
			Columns: []string{activeingredient.MedicinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.MedicinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.MedicinesTable,
			Columns: []string{activeingredient.MedicinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.PrescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.PrescriptionsTable,
			Columns: []string{activeingredient.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.RemovedPrescriptionsIDs(); len(nodes) > 0 && !aiu.mutation.PrescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.PrescriptionsTable,
			Columns: []string{activeingredient.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.PrescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.PrescriptionsTable,
			Columns: []string{activeingredient.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.StockingLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.StockingLogsTable,
			Columns: []string{activeingredient.StockingLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stockinglog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.RemovedStockingLogsIDs(); len(nodes) > 0 && !aiu.mutation.StockingLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.StockingLogsTable,
			Columns: []string{activeingredient.StockingLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stockinglog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.StockingLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.StockingLogsTable,
			Columns: []string{activeingredient.StockingLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stockinglog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiu.mutation.ConsumptionLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.ConsumptionLogsTable,
			Columns: []string{activeingredient.ConsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.RemovedConsumptionLogsIDs(); len(nodes) > 0 && !aiu.mutation.ConsumptionLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.ConsumptionLogsTable,
			Columns: []string{activeingredient.ConsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiu.mutation.ConsumptionLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.ConsumptionLogsTable,
			Columns: []string{activeingredient.ConsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activeingredient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aiu.mutation.done = true
	return n, nil
}

// ActiveIngredientUpdateOne is the builder for updating a single ActiveIngredient entity.
type ActiveIngredientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActiveIngredientMutation
}

// SetName sets the "name" field.
func (aiuo *ActiveIngredientUpdateOne) SetName(s string) *ActiveIngredientUpdateOne {
	aiuo.mutation.SetName(s)
	return aiuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aiuo *ActiveIngredientUpdateOne) SetNillableName(s *string) *ActiveIngredientUpdateOne {
	if s != nil {
		aiuo.SetName(*s)
	}
	return aiuo
}

// SetStock sets the "stock" field.
func (aiuo *ActiveIngredientUpdateOne) SetStock(i int) *ActiveIngredientUpdateOne {
	aiuo.mutation.ResetStock()
	aiuo.mutation.SetStock(i)
	return aiuo
}

// SetNillableStock sets the "stock" field if the given value is not nil.
func (aiuo *ActiveIngredientUpdateOne) SetNillableStock(i *int) *ActiveIngredientUpdateOne {
	if i != nil {
		aiuo.SetStock(*i)
	}
	return aiuo
}

// AddStock adds i to the "stock" field.
func (aiuo *ActiveIngredientUpdateOne) AddStock(i int) *ActiveIngredientUpdateOne {
	aiuo.mutation.AddStock(i)
	return aiuo
}

// ClearStock clears the value of the "stock" field.
func (aiuo *ActiveIngredientUpdateOne) ClearStock() *ActiveIngredientUpdateOne {
	aiuo.mutation.ClearStock()
	return aiuo
}

// SetUnit sets the "unit" field.
func (aiuo *ActiveIngredientUpdateOne) SetUnit(a activeingredient.Unit) *ActiveIngredientUpdateOne {
	aiuo.mutation.SetUnit(a)
	return aiuo
}

// SetNillableUnit sets the "unit" field if the given value is not nil.
func (aiuo *ActiveIngredientUpdateOne) SetNillableUnit(a *activeingredient.Unit) *ActiveIngredientUpdateOne {
	if a != nil {
		aiuo.SetUnit(*a)
	}
	return aiuo
}

// ClearUnit clears the value of the "unit" field.
func (aiuo *ActiveIngredientUpdateOne) ClearUnit() *ActiveIngredientUpdateOne {
	aiuo.mutation.ClearUnit()
	return aiuo
}

// SetLastStockedAt sets the "last_stocked_at" field.
func (aiuo *ActiveIngredientUpdateOne) SetLastStockedAt(t time.Time) *ActiveIngredientUpdateOne {
	aiuo.mutation.SetLastStockedAt(t)
	return aiuo
}

// SetNillableLastStockedAt sets the "last_stocked_at" field if the given value is not nil.
func (aiuo *ActiveIngredientUpdateOne) SetNillableLastStockedAt(t *time.Time) *ActiveIngredientUpdateOne {
	if t != nil {
		aiuo.SetLastStockedAt(*t)
	}
	return aiuo
}

// SetLastConsumedAt sets the "last_consumed_at" field.
func (aiuo *ActiveIngredientUpdateOne) SetLastConsumedAt(t time.Time) *ActiveIngredientUpdateOne {
	aiuo.mutation.SetLastConsumedAt(t)
	return aiuo
}

// SetNillableLastConsumedAt sets the "last_consumed_at" field if the given value is not nil.
func (aiuo *ActiveIngredientUpdateOne) SetNillableLastConsumedAt(t *time.Time) *ActiveIngredientUpdateOne {
	if t != nil {
		aiuo.SetLastConsumedAt(*t)
	}
	return aiuo
}

// AddMedicineIDs adds the "medicines" edge to the Medicine entity by IDs.
func (aiuo *ActiveIngredientUpdateOne) AddMedicineIDs(ids ...int) *ActiveIngredientUpdateOne {
	aiuo.mutation.AddMedicineIDs(ids...)
	return aiuo
}

// AddMedicines adds the "medicines" edges to the Medicine entity.
func (aiuo *ActiveIngredientUpdateOne) AddMedicines(m ...*Medicine) *ActiveIngredientUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return aiuo.AddMedicineIDs(ids...)
}

// AddPrescriptionIDs adds the "prescriptions" edge to the Prescription entity by IDs.
func (aiuo *ActiveIngredientUpdateOne) AddPrescriptionIDs(ids ...int) *ActiveIngredientUpdateOne {
	aiuo.mutation.AddPrescriptionIDs(ids...)
	return aiuo
}

// AddPrescriptions adds the "prescriptions" edges to the Prescription entity.
func (aiuo *ActiveIngredientUpdateOne) AddPrescriptions(p ...*Prescription) *ActiveIngredientUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return aiuo.AddPrescriptionIDs(ids...)
}

// AddStockingLogIDs adds the "stocking_logs" edge to the StockingLog entity by IDs.
func (aiuo *ActiveIngredientUpdateOne) AddStockingLogIDs(ids ...int) *ActiveIngredientUpdateOne {
	aiuo.mutation.AddStockingLogIDs(ids...)
	return aiuo
}

// AddStockingLogs adds the "stocking_logs" edges to the StockingLog entity.
func (aiuo *ActiveIngredientUpdateOne) AddStockingLogs(s ...*StockingLog) *ActiveIngredientUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aiuo.AddStockingLogIDs(ids...)
}

// AddConsumptionLogIDs adds the "consumption_logs" edge to the ConsumptionLog entity by IDs.
func (aiuo *ActiveIngredientUpdateOne) AddConsumptionLogIDs(ids ...int) *ActiveIngredientUpdateOne {
	aiuo.mutation.AddConsumptionLogIDs(ids...)
	return aiuo
}

// AddConsumptionLogs adds the "consumption_logs" edges to the ConsumptionLog entity.
func (aiuo *ActiveIngredientUpdateOne) AddConsumptionLogs(c ...*ConsumptionLog) *ActiveIngredientUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return aiuo.AddConsumptionLogIDs(ids...)
}

// Mutation returns the ActiveIngredientMutation object of the builder.
func (aiuo *ActiveIngredientUpdateOne) Mutation() *ActiveIngredientMutation {
	return aiuo.mutation
}

// ClearMedicines clears all "medicines" edges to the Medicine entity.
func (aiuo *ActiveIngredientUpdateOne) ClearMedicines() *ActiveIngredientUpdateOne {
	aiuo.mutation.ClearMedicines()
	return aiuo
}

// RemoveMedicineIDs removes the "medicines" edge to Medicine entities by IDs.
func (aiuo *ActiveIngredientUpdateOne) RemoveMedicineIDs(ids ...int) *ActiveIngredientUpdateOne {
	aiuo.mutation.RemoveMedicineIDs(ids...)
	return aiuo
}

// RemoveMedicines removes "medicines" edges to Medicine entities.
func (aiuo *ActiveIngredientUpdateOne) RemoveMedicines(m ...*Medicine) *ActiveIngredientUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return aiuo.RemoveMedicineIDs(ids...)
}

// ClearPrescriptions clears all "prescriptions" edges to the Prescription entity.
func (aiuo *ActiveIngredientUpdateOne) ClearPrescriptions() *ActiveIngredientUpdateOne {
	aiuo.mutation.ClearPrescriptions()
	return aiuo
}

// RemovePrescriptionIDs removes the "prescriptions" edge to Prescription entities by IDs.
func (aiuo *ActiveIngredientUpdateOne) RemovePrescriptionIDs(ids ...int) *ActiveIngredientUpdateOne {
	aiuo.mutation.RemovePrescriptionIDs(ids...)
	return aiuo
}

// RemovePrescriptions removes "prescriptions" edges to Prescription entities.
func (aiuo *ActiveIngredientUpdateOne) RemovePrescriptions(p ...*Prescription) *ActiveIngredientUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return aiuo.RemovePrescriptionIDs(ids...)
}

// ClearStockingLogs clears all "stocking_logs" edges to the StockingLog entity.
func (aiuo *ActiveIngredientUpdateOne) ClearStockingLogs() *ActiveIngredientUpdateOne {
	aiuo.mutation.ClearStockingLogs()
	return aiuo
}

// RemoveStockingLogIDs removes the "stocking_logs" edge to StockingLog entities by IDs.
func (aiuo *ActiveIngredientUpdateOne) RemoveStockingLogIDs(ids ...int) *ActiveIngredientUpdateOne {
	aiuo.mutation.RemoveStockingLogIDs(ids...)
	return aiuo
}

// RemoveStockingLogs removes "stocking_logs" edges to StockingLog entities.
func (aiuo *ActiveIngredientUpdateOne) RemoveStockingLogs(s ...*StockingLog) *ActiveIngredientUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return aiuo.RemoveStockingLogIDs(ids...)
}

// ClearConsumptionLogs clears all "consumption_logs" edges to the ConsumptionLog entity.
func (aiuo *ActiveIngredientUpdateOne) ClearConsumptionLogs() *ActiveIngredientUpdateOne {
	aiuo.mutation.ClearConsumptionLogs()
	return aiuo
}

// RemoveConsumptionLogIDs removes the "consumption_logs" edge to ConsumptionLog entities by IDs.
func (aiuo *ActiveIngredientUpdateOne) RemoveConsumptionLogIDs(ids ...int) *ActiveIngredientUpdateOne {
	aiuo.mutation.RemoveConsumptionLogIDs(ids...)
	return aiuo
}

// RemoveConsumptionLogs removes "consumption_logs" edges to ConsumptionLog entities.
func (aiuo *ActiveIngredientUpdateOne) RemoveConsumptionLogs(c ...*ConsumptionLog) *ActiveIngredientUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return aiuo.RemoveConsumptionLogIDs(ids...)
}

// Where appends a list predicates to the ActiveIngredientUpdate builder.
func (aiuo *ActiveIngredientUpdateOne) Where(ps ...predicate.ActiveIngredient) *ActiveIngredientUpdateOne {
	aiuo.mutation.Where(ps...)
	return aiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aiuo *ActiveIngredientUpdateOne) Select(field string, fields ...string) *ActiveIngredientUpdateOne {
	aiuo.fields = append([]string{field}, fields...)
	return aiuo
}

// Save executes the query and returns the updated ActiveIngredient entity.
func (aiuo *ActiveIngredientUpdateOne) Save(ctx context.Context) (*ActiveIngredient, error) {
	return withHooks(ctx, aiuo.sqlSave, aiuo.mutation, aiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aiuo *ActiveIngredientUpdateOne) SaveX(ctx context.Context) *ActiveIngredient {
	node, err := aiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aiuo *ActiveIngredientUpdateOne) Exec(ctx context.Context) error {
	_, err := aiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aiuo *ActiveIngredientUpdateOne) ExecX(ctx context.Context) {
	if err := aiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aiuo *ActiveIngredientUpdateOne) check() error {
	if v, ok := aiuo.mutation.Name(); ok {
		if err := activeingredient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ActiveIngredient.name": %w`, err)}
		}
	}
	if v, ok := aiuo.mutation.Unit(); ok {
		if err := activeingredient.UnitValidator(v); err != nil {
			return &ValidationError{Name: "unit", err: fmt.Errorf(`ent: validator failed for field "ActiveIngredient.unit": %w`, err)}
		}
	}
	return nil
}

func (aiuo *ActiveIngredientUpdateOne) sqlSave(ctx context.Context) (_node *ActiveIngredient, err error) {
	if err := aiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(activeingredient.Table, activeingredient.Columns, sqlgraph.NewFieldSpec(activeingredient.FieldID, field.TypeInt))
	id, ok := aiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActiveIngredient.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activeingredient.FieldID)
		for _, f := range fields {
			if !activeingredient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activeingredient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aiuo.mutation.Name(); ok {
		_spec.SetField(activeingredient.FieldName, field.TypeString, value)
	}
	if value, ok := aiuo.mutation.Stock(); ok {
		_spec.SetField(activeingredient.FieldStock, field.TypeInt, value)
	}
	if value, ok := aiuo.mutation.AddedStock(); ok {
		_spec.AddField(activeingredient.FieldStock, field.TypeInt, value)
	}
	if aiuo.mutation.StockCleared() {
		_spec.ClearField(activeingredient.FieldStock, field.TypeInt)
	}
	if value, ok := aiuo.mutation.Unit(); ok {
		_spec.SetField(activeingredient.FieldUnit, field.TypeEnum, value)
	}
	if aiuo.mutation.UnitCleared() {
		_spec.ClearField(activeingredient.FieldUnit, field.TypeEnum)
	}
	if value, ok := aiuo.mutation.LastStockedAt(); ok {
		_spec.SetField(activeingredient.FieldLastStockedAt, field.TypeTime, value)
	}
	if value, ok := aiuo.mutation.LastConsumedAt(); ok {
		_spec.SetField(activeingredient.FieldLastConsumedAt, field.TypeTime, value)
	}
	if aiuo.mutation.MedicinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.MedicinesTable,
			Columns: []string{activeingredient.MedicinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.RemovedMedicinesIDs(); len(nodes) > 0 && !aiuo.mutation.MedicinesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.MedicinesTable,
			Columns: []string{activeingredient.MedicinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.MedicinesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.MedicinesTable,
			Columns: []string{activeingredient.MedicinesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(medicine.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.PrescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.PrescriptionsTable,
			Columns: []string{activeingredient.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.RemovedPrescriptionsIDs(); len(nodes) > 0 && !aiuo.mutation.PrescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.PrescriptionsTable,
			Columns: []string{activeingredient.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.PrescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.PrescriptionsTable,
			Columns: []string{activeingredient.PrescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(prescription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.StockingLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.StockingLogsTable,
			Columns: []string{activeingredient.StockingLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stockinglog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.RemovedStockingLogsIDs(); len(nodes) > 0 && !aiuo.mutation.StockingLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.StockingLogsTable,
			Columns: []string{activeingredient.StockingLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stockinglog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.StockingLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.StockingLogsTable,
			Columns: []string{activeingredient.StockingLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(stockinglog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aiuo.mutation.ConsumptionLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.ConsumptionLogsTable,
			Columns: []string{activeingredient.ConsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.RemovedConsumptionLogsIDs(); len(nodes) > 0 && !aiuo.mutation.ConsumptionLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.ConsumptionLogsTable,
			Columns: []string{activeingredient.ConsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aiuo.mutation.ConsumptionLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activeingredient.ConsumptionLogsTable,
			Columns: []string{activeingredient.ConsumptionLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(consumptionlog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActiveIngredient{config: aiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activeingredient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aiuo.mutation.done = true
	return _node, nil
}
